
UDS_Task.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000096  00800060  000009fe  00000a92  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003d  008000f6  008000f6  00000b28  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b28  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b58  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  00000b94  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a89  00000000  00000000  00000cec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a52  00000000  00000000  00002775  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b25  00000000  00000000  000031c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000030c  00000000  00000000  00003cec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000084f  00000000  00000000  00003ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000af4  00000000  00000000  00004847  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  0000533b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 fd 03 	jmp	0x7fa	; 0x7fa <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 d4 03 	jmp	0x7a8	; 0x7a8 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ef       	ldi	r30, 0xFE	; 254
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 3f       	cpi	r26, 0xF6	; 246
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a6 ef       	ldi	r26, 0xF6	; 246
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 33       	cpi	r26, 0x33	; 51
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 c2 00 	call	0x184	; 0x184 <main>
  8a:	0c 94 fd 04 	jmp	0x9fa	; 0x9fa <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <time>:
  92:	fc 01       	movw	r30, r24
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	f8 94       	cli
  98:	60 91 2f 01 	lds	r22, 0x012F	; 0x80012f <__system_time>
  9c:	70 91 30 01 	lds	r23, 0x0130	; 0x800130 <__system_time+0x1>
  a0:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <__system_time+0x2>
  a4:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <__system_time+0x3>
  a8:	0f be       	out	0x3f, r0	; 63
  aa:	30 97       	sbiw	r30, 0x00	; 0
  ac:	21 f0       	breq	.+8      	; 0xb6 <time+0x24>
  ae:	60 83       	st	Z, r22
  b0:	71 83       	std	Z+1, r23	; 0x01
  b2:	82 83       	std	Z+2, r24	; 0x02
  b4:	93 83       	std	Z+3, r25	; 0x03
  b6:	08 95       	ret

000000b8 <RX_CallBack>:

}

void RX_CallBack(void)
{
	u8 temp = UART_ReceiveChrINT();
  b8:	0e 94 cd 03 	call	0x79a	; 0x79a <UART_ReceiveChrINT>
	if(temp == '\r')
  bc:	8d 30       	cpi	r24, 0x0D	; 13
  be:	61 f4       	brne	.+24     	; 0xd8 <RX_CallBack+0x20>
	{
		data[RX_Index] = '\0';
  c0:	e0 91 f9 00 	lds	r30, 0x00F9	; 0x8000f9 <RX_Index>
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	e9 5f       	subi	r30, 0xF9	; 249
  c8:	fe 4f       	sbci	r31, 0xFE	; 254
  ca:	10 82       	st	Z, r1
		doneFlag = 1;
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	80 93 f8 00 	sts	0x00F8, r24	; 0x8000f8 <doneFlag>
		lcd_vidSendCmd(_LCD_CLEAR);
  d2:	0e 94 bb 01 	call	0x376	; 0x376 <lcd_vidSendCmd>
  d6:	08 95       	ret
	}
	else if(temp == 0x08)
  d8:	88 30       	cpi	r24, 0x08	; 8
  da:	51 f4       	brne	.+20     	; 0xf0 <RX_CallBack+0x38>
	{
		data[--RX_Index] = '\0';
  dc:	e0 91 f9 00 	lds	r30, 0x00F9	; 0x8000f9 <RX_Index>
  e0:	e1 50       	subi	r30, 0x01	; 1
  e2:	e0 93 f9 00 	sts	0x00F9, r30	; 0x8000f9 <RX_Index>
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	e9 5f       	subi	r30, 0xF9	; 249
  ea:	fe 4f       	sbci	r31, 0xFE	; 254
  ec:	10 82       	st	Z, r1
  ee:	08 95       	ret
	}
	else
	{
		data[RX_Index] = temp;
  f0:	e0 91 f9 00 	lds	r30, 0x00F9	; 0x8000f9 <RX_Index>
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	e9 5f       	subi	r30, 0xF9	; 249
  f8:	fe 4f       	sbci	r31, 0xFE	; 254
  fa:	80 83       	st	Z, r24
		RX_Index++;
  fc:	80 91 f9 00 	lds	r24, 0x00F9	; 0x8000f9 <RX_Index>
 100:	8f 5f       	subi	r24, 0xFF	; 255
 102:	80 93 f9 00 	sts	0x00F9, r24	; 0x8000f9 <RX_Index>
 106:	08 95       	ret

00000108 <int2HexStr>:
    }
	return 0;
}

void int2HexStr(unsigned long num, char *str)
{
 108:	0f 93       	push	r16
 10a:	1f 93       	push	r17
 10c:	cf 93       	push	r28
 10e:	df 93       	push	r29
 110:	8b 01       	movw	r16, r22
 112:	9c 01       	movw	r18, r24
 114:	fa 01       	movw	r30, r20

	int i = 12;
 116:	8c e0       	ldi	r24, 0x0C	; 12
 118:	90 e0       	ldi	r25, 0x00	; 0
	int j = 0;

	do{
		str[i] = "0123456789ABCDEF"[num % 16];
 11a:	df 01       	movw	r26, r30
 11c:	a8 0f       	add	r26, r24
 11e:	b9 1f       	adc	r27, r25
 120:	b9 01       	movw	r22, r18
 122:	a8 01       	movw	r20, r16
 124:	4f 70       	andi	r20, 0x0F	; 15
 126:	55 27       	eor	r21, r21
 128:	66 27       	eor	r22, r22
 12a:	77 27       	eor	r23, r23
 12c:	ea 01       	movw	r28, r20
 12e:	c0 55       	subi	r28, 0x50	; 80
 130:	df 4f       	sbci	r29, 0xFF	; 255
 132:	48 81       	ld	r20, Y
 134:	4c 93       	st	X, r20
		i--;
 136:	01 97       	sbiw	r24, 0x01	; 1
		num = num/16;
 138:	68 94       	set
 13a:	13 f8       	bld	r1, 3
 13c:	36 95       	lsr	r19
 13e:	27 95       	ror	r18
 140:	17 95       	ror	r17
 142:	07 95       	ror	r16
 144:	16 94       	lsr	r1
 146:	d1 f7       	brne	.-12     	; 0x13c <int2HexStr+0x34>
	}while( num > 0);
 148:	01 15       	cp	r16, r1
 14a:	11 05       	cpc	r17, r1
 14c:	21 05       	cpc	r18, r1
 14e:	31 05       	cpc	r19, r1
 150:	21 f7       	brne	.-56     	; 0x11a <int2HexStr+0x12>
 152:	20 e0       	ldi	r18, 0x00	; 0
 154:	30 e0       	ldi	r19, 0x00	; 0
 156:	0a c0       	rjmp	.+20     	; 0x16c <int2HexStr+0x64>

	while( ++i < 13){
		str[j++] = str[i];
 158:	df 01       	movw	r26, r30
 15a:	a2 0f       	add	r26, r18
 15c:	b3 1f       	adc	r27, r19
 15e:	ef 01       	movw	r28, r30
 160:	c8 0f       	add	r28, r24
 162:	d9 1f       	adc	r29, r25
 164:	48 81       	ld	r20, Y
 166:	4c 93       	st	X, r20
 168:	2f 5f       	subi	r18, 0xFF	; 255
 16a:	3f 4f       	sbci	r19, 0xFF	; 255
		str[i] = "0123456789ABCDEF"[num % 16];
		i--;
		num = num/16;
	}while( num > 0);

	while( ++i < 13){
 16c:	01 96       	adiw	r24, 0x01	; 1
 16e:	8d 30       	cpi	r24, 0x0D	; 13
 170:	91 05       	cpc	r25, r1
 172:	94 f3       	brlt	.-28     	; 0x158 <int2HexStr+0x50>
		str[j++] = str[i];
	}

	str[j] = 0;
 174:	e2 0f       	add	r30, r18
 176:	f3 1f       	adc	r31, r19
 178:	10 82       	st	Z, r1

}
 17a:	df 91       	pop	r29
 17c:	cf 91       	pop	r28
 17e:	1f 91       	pop	r17
 180:	0f 91       	pop	r16
 182:	08 95       	ret

00000184 <main>:


int main(void)
{
	int random_number;
	dio_vidConfigChannel(DIO_PORTC,DIO_PIN7,OUTPUT);
 184:	41 e0       	ldi	r20, 0x01	; 1
 186:	67 e0       	ldi	r22, 0x07	; 7
 188:	82 e0       	ldi	r24, 0x02	; 2
 18a:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <dio_vidConfigChannel>
	dio_vidWriteChannel(DIO_PORTC,DIO_PIN7,STD_LOW);
 18e:	40 e0       	ldi	r20, 0x00	; 0
 190:	67 e0       	ldi	r22, 0x07	; 7
 192:	82 e0       	ldi	r24, 0x02	; 2
 194:	0e 94 4e 03 	call	0x69c	; 0x69c <dio_vidWriteChannel>
	lcd_vidInit();
 198:	0e 94 9b 02 	call	0x536	; 0x536 <lcd_vidInit>
	lcd_vidDisplyStr("Hello");
 19c:	81 ec       	ldi	r24, 0xC1	; 193
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	0e 94 64 02 	call	0x4c8	; 0x4c8 <lcd_vidDisplyStr>
	UART_setRxCallback(RX_CallBack);
 1a4:	8c e5       	ldi	r24, 0x5C	; 92
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	0e 94 cf 03 	call	0x79e	; 0x79e <UART_setRxCallback>
	UART_Init(UART_BAUDRATE_9600);
 1ac:	87 e6       	ldi	r24, 0x67	; 103
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	0e 94 bb 03 	call	0x776	; 0x776 <UART_Init>
    srand(time(NULL));
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	0e 94 49 00 	call	0x92	; 0x92 <time>
 1bc:	0e 94 77 04 	call	0x8ee	; 0x8ee <srand>
    random_number = rand();
 1c0:	0e 94 72 04 	call	0x8e4	; 0x8e4 <rand>
	int2HexStr(random_number , sendstr );
 1c4:	bc 01       	movw	r22, r24
 1c6:	99 0f       	add	r25, r25
 1c8:	88 0b       	sbc	r24, r24
 1ca:	99 0b       	sbc	r25, r25
 1cc:	4b e1       	ldi	r20, 0x1B	; 27
 1ce:	51 e0       	ldi	r21, 0x01	; 1
 1d0:	0e 94 84 00 	call	0x108	; 0x108 <int2HexStr>
    while (1) 
    {
		if( doneFlag == 1 )
 1d4:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <doneFlag>
 1d8:	81 30       	cpi	r24, 0x01	; 1
 1da:	e1 f7       	brne	.-8      	; 0x1d4 <main+0x50>
		{
			doneFlag = 0;
 1dc:	10 92 f8 00 	sts	0x00F8, r1	; 0x8000f8 <doneFlag>
			if(memcmp(data, "2701", 4) == 0)
 1e0:	44 e0       	ldi	r20, 0x04	; 4
 1e2:	50 e0       	ldi	r21, 0x00	; 0
 1e4:	67 ec       	ldi	r22, 0xC7	; 199
 1e6:	70 e0       	ldi	r23, 0x00	; 0
 1e8:	87 e0       	ldi	r24, 0x07	; 7
 1ea:	91 e0       	ldi	r25, 0x01	; 1
 1ec:	0e 94 82 04 	call	0x904	; 0x904 <memcmp>
 1f0:	89 2b       	or	r24, r25
 1f2:	09 f0       	breq	.+2      	; 0x1f6 <main+0x72>
 1f4:	5b c0       	rjmp	.+182    	; 0x2ac <main+0x128>
			{
				strcat(successfulAccess, sendstr);
 1f6:	6b e1       	ldi	r22, 0x1B	; 27
 1f8:	71 e0       	ldi	r23, 0x01	; 1
 1fa:	84 e6       	ldi	r24, 0x64	; 100
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	0e 94 8f 04 	call	0x91e	; 0x91e <strcat>
				lcd_vidDisplyStr(successfulAccess);
 202:	84 e6       	ldi	r24, 0x64	; 100
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	0e 94 64 02 	call	0x4c8	; 0x4c8 <lcd_vidDisplyStr>
				for(u8 i = 4; i < 12; i++)
 20a:	54 e0       	ldi	r21, 0x04	; 4
 20c:	41 c0       	rjmp	.+130    	; 0x290 <main+0x10c>
				{
					if(successfulAccess[i] > '9')
 20e:	25 2f       	mov	r18, r21
 210:	30 e0       	ldi	r19, 0x00	; 0
 212:	f9 01       	movw	r30, r18
 214:	ec 59       	subi	r30, 0x9C	; 156
 216:	ff 4f       	sbci	r31, 0xFF	; 255
 218:	80 81       	ld	r24, Z
 21a:	8a 33       	cpi	r24, 0x3A	; 58
 21c:	30 f0       	brcs	.+12     	; 0x22a <main+0xa6>
					{
						successfulAccess[i] = successfulAccess[i] - 'A' + 10;
 21e:	f9 01       	movw	r30, r18
 220:	ec 59       	subi	r30, 0x9C	; 156
 222:	ff 4f       	sbci	r31, 0xFF	; 255
 224:	87 53       	subi	r24, 0x37	; 55
 226:	80 83       	st	Z, r24
 228:	05 c0       	rjmp	.+10     	; 0x234 <main+0xb0>
					}
					else
					{
						successfulAccess[i] -= '0';
 22a:	f9 01       	movw	r30, r18
 22c:	ec 59       	subi	r30, 0x9C	; 156
 22e:	ff 4f       	sbci	r31, 0xFF	; 255
 230:	80 53       	subi	r24, 0x30	; 48
 232:	80 83       	st	Z, r24
					}
					if(key[i-4] > '9')
 234:	c9 01       	movw	r24, r18
 236:	04 97       	sbiw	r24, 0x04	; 4
 238:	fc 01       	movw	r30, r24
 23a:	e7 59       	subi	r30, 0x97	; 151
 23c:	ff 4f       	sbci	r31, 0xFF	; 255
 23e:	40 81       	ld	r20, Z
 240:	4a 33       	cpi	r20, 0x3A	; 58
 242:	30 f0       	brcs	.+12     	; 0x250 <main+0xcc>
					{
						key[i-4] = key[i-4] - 'A' + 10;
 244:	fc 01       	movw	r30, r24
 246:	e7 59       	subi	r30, 0x97	; 151
 248:	ff 4f       	sbci	r31, 0xFF	; 255
 24a:	47 53       	subi	r20, 0x37	; 55
 24c:	40 83       	st	Z, r20
 24e:	05 c0       	rjmp	.+10     	; 0x25a <main+0xd6>
					}
					else
					{
						key[i-4] -= '0';
 250:	fc 01       	movw	r30, r24
 252:	e7 59       	subi	r30, 0x97	; 151
 254:	ff 4f       	sbci	r31, 0xFF	; 255
 256:	40 53       	subi	r20, 0x30	; 48
 258:	40 83       	st	Z, r20
					}

					cipher[i-4]= successfulAccess[i] ^ key[i-4];
 25a:	f9 01       	movw	r30, r18
 25c:	ec 59       	subi	r30, 0x9C	; 156
 25e:	ff 4f       	sbci	r31, 0xFF	; 255
 260:	30 81       	ld	r19, Z
 262:	fc 01       	movw	r30, r24
 264:	e7 59       	subi	r30, 0x97	; 151
 266:	ff 4f       	sbci	r31, 0xFF	; 255
 268:	20 81       	ld	r18, Z
 26a:	23 27       	eor	r18, r19
 26c:	fc 01       	movw	r30, r24
 26e:	e2 50       	subi	r30, 0x02	; 2
 270:	ff 4f       	sbci	r31, 0xFF	; 255
 272:	20 83       	st	Z, r18

					if(cipher[i-4] > 9)
 274:	2a 30       	cpi	r18, 0x0A	; 10
 276:	30 f0       	brcs	.+12     	; 0x284 <main+0x100>
					{
						cipher[i-4] = cipher[i-4] - 10 +'A';
 278:	fc 01       	movw	r30, r24
 27a:	e2 50       	subi	r30, 0x02	; 2
 27c:	ff 4f       	sbci	r31, 0xFF	; 255
 27e:	29 5c       	subi	r18, 0xC9	; 201
 280:	20 83       	st	Z, r18
 282:	05 c0       	rjmp	.+10     	; 0x28e <main+0x10a>
					}
					else
					{
						cipher[i-4] += '0';
 284:	fc 01       	movw	r30, r24
 286:	e2 50       	subi	r30, 0x02	; 2
 288:	ff 4f       	sbci	r31, 0xFF	; 255
 28a:	20 5d       	subi	r18, 0xD0	; 208
 28c:	20 83       	st	Z, r18
			doneFlag = 0;
			if(memcmp(data, "2701", 4) == 0)
			{
				strcat(successfulAccess, sendstr);
				lcd_vidDisplyStr(successfulAccess);
				for(u8 i = 4; i < 12; i++)
 28e:	5f 5f       	subi	r21, 0xFF	; 255
 290:	5c 30       	cpi	r21, 0x0C	; 12
 292:	08 f4       	brcc	.+2      	; 0x296 <main+0x112>
 294:	bc cf       	rjmp	.-136    	; 0x20e <main+0x8a>
					else
					{
						cipher[i-4] += '0';
					}
				}
				cipher[8] = '\0';
 296:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <cipher+0x8>
				lcd_vidGotoRowColumn(1,0);
 29a:	60 e0       	ldi	r22, 0x00	; 0
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	0e 94 45 02 	call	0x48a	; 0x48a <lcd_vidGotoRowColumn>
				lcd_vidDisplyStr(cipher);
 2a2:	8e ef       	ldi	r24, 0xFE	; 254
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	0e 94 64 02 	call	0x4c8	; 0x4c8 <lcd_vidDisplyStr>
 2aa:	4d c0       	rjmp	.+154    	; 0x346 <main+0x1c2>
			}
			else if(memcmp(data, "3101AA00", 8) == 0)
 2ac:	48 e0       	ldi	r20, 0x08	; 8
 2ae:	50 e0       	ldi	r21, 0x00	; 0
 2b0:	6c ec       	ldi	r22, 0xCC	; 204
 2b2:	70 e0       	ldi	r23, 0x00	; 0
 2b4:	87 e0       	ldi	r24, 0x07	; 7
 2b6:	91 e0       	ldi	r25, 0x01	; 1
 2b8:	0e 94 82 04 	call	0x904	; 0x904 <memcmp>
 2bc:	89 2b       	or	r24, r25
 2be:	99 f4       	brne	.+38     	; 0x2e6 <main+0x162>
			{
				if(securityAccess == 1)
 2c0:	80 91 f7 00 	lds	r24, 0x00F7	; 0x8000f7 <securityAccess>
 2c4:	81 30       	cpi	r24, 0x01	; 1
 2c6:	51 f4       	brne	.+20     	; 0x2dc <main+0x158>
				{
					lcd_vidDisplyStr((u8*)"7101AA00");
 2c8:	85 ed       	ldi	r24, 0xD5	; 213
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	0e 94 64 02 	call	0x4c8	; 0x4c8 <lcd_vidDisplyStr>
					dio_vidWriteChannel(DIO_PORTC,DIO_PIN7,STD_HIGH);
 2d0:	41 e0       	ldi	r20, 0x01	; 1
 2d2:	67 e0       	ldi	r22, 0x07	; 7
 2d4:	82 e0       	ldi	r24, 0x02	; 2
 2d6:	0e 94 4e 03 	call	0x69c	; 0x69c <dio_vidWriteChannel>
 2da:	35 c0       	rjmp	.+106    	; 0x346 <main+0x1c2>
				}
				else
				{
					lcd_vidDisplyStr((u8*)"7F3135");
 2dc:	8e ed       	ldi	r24, 0xDE	; 222
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	0e 94 64 02 	call	0x4c8	; 0x4c8 <lcd_vidDisplyStr>
 2e4:	30 c0       	rjmp	.+96     	; 0x346 <main+0x1c2>
				}
			}
			else if(memcmp(data, "2702", 4) == 0)
 2e6:	44 e0       	ldi	r20, 0x04	; 4
 2e8:	50 e0       	ldi	r21, 0x00	; 0
 2ea:	65 ee       	ldi	r22, 0xE5	; 229
 2ec:	70 e0       	ldi	r23, 0x00	; 0
 2ee:	87 e0       	ldi	r24, 0x07	; 7
 2f0:	91 e0       	ldi	r25, 0x01	; 1
 2f2:	0e 94 82 04 	call	0x904	; 0x904 <memcmp>
 2f6:	89 2b       	or	r24, r25
 2f8:	99 f0       	breq	.+38     	; 0x320 <main+0x19c>
 2fa:	25 c0       	rjmp	.+74     	; 0x346 <main+0x1c2>
			{
				for(u8 i = 4; i < 12; i++)
				{
					if(cipher[i-4] != data[i])
 2fc:	82 2f       	mov	r24, r18
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	fc 01       	movw	r30, r24
 302:	e6 50       	subi	r30, 0x06	; 6
 304:	ff 4f       	sbci	r31, 0xFF	; 255
 306:	30 81       	ld	r19, Z
 308:	fc 01       	movw	r30, r24
 30a:	e9 5f       	subi	r30, 0xF9	; 249
 30c:	fe 4f       	sbci	r31, 0xFE	; 254
 30e:	80 81       	ld	r24, Z
 310:	38 17       	cp	r19, r24
 312:	21 f0       	breq	.+8      	; 0x31c <main+0x198>
					{
						errorFlag = 1;
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__data_end>
						break;
 31a:	05 c0       	rjmp	.+10     	; 0x326 <main+0x1a2>
					lcd_vidDisplyStr((u8*)"7F3135");
				}
			}
			else if(memcmp(data, "2702", 4) == 0)
			{
				for(u8 i = 4; i < 12; i++)
 31c:	2f 5f       	subi	r18, 0xFF	; 255
 31e:	01 c0       	rjmp	.+2      	; 0x322 <main+0x19e>
 320:	24 e0       	ldi	r18, 0x04	; 4
 322:	2c 30       	cpi	r18, 0x0C	; 12
 324:	58 f3       	brcs	.-42     	; 0x2fc <main+0x178>
					{
						errorFlag = 1;
						break;
					}
				}
				if(errorFlag == 0)
 326:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__data_end>
 32a:	81 11       	cpse	r24, r1
 32c:	08 c0       	rjmp	.+16     	; 0x33e <main+0x1ba>
				{
					lcd_vidDisplyStr((u8*)"6702");
 32e:	8a ee       	ldi	r24, 0xEA	; 234
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	0e 94 64 02 	call	0x4c8	; 0x4c8 <lcd_vidDisplyStr>
					securityAccess = 1;
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <securityAccess>
 33c:	04 c0       	rjmp	.+8      	; 0x346 <main+0x1c2>
				}
				else
				{
					lcd_vidDisplyStr((u8*)"7F2735");
 33e:	8f ee       	ldi	r24, 0xEF	; 239
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	0e 94 64 02 	call	0x4c8	; 0x4c8 <lcd_vidDisplyStr>
				}

			}
			RX_Index = 0;
 346:	10 92 f9 00 	sts	0x00F9, r1	; 0x8000f9 <RX_Index>
 34a:	44 cf       	rjmp	.-376    	; 0x1d4 <main+0x50>

0000034c <enablePulse>:
 34c:	41 e0       	ldi	r20, 0x01	; 1
 34e:	62 e0       	ldi	r22, 0x02	; 2
 350:	80 e0       	ldi	r24, 0x00	; 0
 352:	0e 94 4e 03 	call	0x69c	; 0x69c <dio_vidWriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 356:	85 e0       	ldi	r24, 0x05	; 5
 358:	8a 95       	dec	r24
 35a:	f1 f7       	brne	.-4      	; 0x358 <enablePulse+0xc>
 35c:	00 00       	nop
 35e:	40 e0       	ldi	r20, 0x00	; 0
 360:	62 e0       	ldi	r22, 0x02	; 2
 362:	80 e0       	ldi	r24, 0x00	; 0
 364:	0e 94 4e 03 	call	0x69c	; 0x69c <dio_vidWriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 368:	8f e3       	ldi	r24, 0x3F	; 63
 36a:	9f e1       	ldi	r25, 0x1F	; 31
 36c:	01 97       	sbiw	r24, 0x01	; 1
 36e:	f1 f7       	brne	.-4      	; 0x36c <enablePulse+0x20>
 370:	00 c0       	rjmp	.+0      	; 0x372 <enablePulse+0x26>
 372:	00 00       	nop
 374:	08 95       	ret

00000376 <lcd_vidSendCmd>:
 376:	cf 93       	push	r28
 378:	c8 2f       	mov	r28, r24
 37a:	40 e0       	ldi	r20, 0x00	; 0
 37c:	63 e0       	ldi	r22, 0x03	; 3
 37e:	80 e0       	ldi	r24, 0x00	; 0
 380:	0e 94 4e 03 	call	0x69c	; 0x69c <dio_vidWriteChannel>
 384:	c4 fb       	bst	r28, 4
 386:	44 27       	eor	r20, r20
 388:	40 f9       	bld	r20, 0
 38a:	60 e0       	ldi	r22, 0x00	; 0
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	0e 94 4e 03 	call	0x69c	; 0x69c <dio_vidWriteChannel>
 392:	c5 fb       	bst	r28, 5
 394:	44 27       	eor	r20, r20
 396:	40 f9       	bld	r20, 0
 398:	61 e0       	ldi	r22, 0x01	; 1
 39a:	81 e0       	ldi	r24, 0x01	; 1
 39c:	0e 94 4e 03 	call	0x69c	; 0x69c <dio_vidWriteChannel>
 3a0:	c6 fb       	bst	r28, 6
 3a2:	44 27       	eor	r20, r20
 3a4:	40 f9       	bld	r20, 0
 3a6:	62 e0       	ldi	r22, 0x02	; 2
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	0e 94 4e 03 	call	0x69c	; 0x69c <dio_vidWriteChannel>
 3ae:	4c 2f       	mov	r20, r28
 3b0:	44 1f       	adc	r20, r20
 3b2:	44 27       	eor	r20, r20
 3b4:	44 1f       	adc	r20, r20
 3b6:	64 e0       	ldi	r22, 0x04	; 4
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	0e 94 4e 03 	call	0x69c	; 0x69c <dio_vidWriteChannel>
 3be:	0e 94 a6 01 	call	0x34c	; 0x34c <enablePulse>
 3c2:	4c 2f       	mov	r20, r28
 3c4:	41 70       	andi	r20, 0x01	; 1
 3c6:	60 e0       	ldi	r22, 0x00	; 0
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	0e 94 4e 03 	call	0x69c	; 0x69c <dio_vidWriteChannel>
 3ce:	c1 fb       	bst	r28, 1
 3d0:	44 27       	eor	r20, r20
 3d2:	40 f9       	bld	r20, 0
 3d4:	61 e0       	ldi	r22, 0x01	; 1
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	0e 94 4e 03 	call	0x69c	; 0x69c <dio_vidWriteChannel>
 3dc:	c2 fb       	bst	r28, 2
 3de:	44 27       	eor	r20, r20
 3e0:	40 f9       	bld	r20, 0
 3e2:	62 e0       	ldi	r22, 0x02	; 2
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	0e 94 4e 03 	call	0x69c	; 0x69c <dio_vidWriteChannel>
 3ea:	c3 fb       	bst	r28, 3
 3ec:	44 27       	eor	r20, r20
 3ee:	40 f9       	bld	r20, 0
 3f0:	64 e0       	ldi	r22, 0x04	; 4
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	0e 94 4e 03 	call	0x69c	; 0x69c <dio_vidWriteChannel>
 3f8:	0e 94 a6 01 	call	0x34c	; 0x34c <enablePulse>
 3fc:	cf 91       	pop	r28
 3fe:	08 95       	ret

00000400 <lcd_vidSendData>:
 400:	cf 93       	push	r28
 402:	c8 2f       	mov	r28, r24
 404:	41 e0       	ldi	r20, 0x01	; 1
 406:	63 e0       	ldi	r22, 0x03	; 3
 408:	80 e0       	ldi	r24, 0x00	; 0
 40a:	0e 94 4e 03 	call	0x69c	; 0x69c <dio_vidWriteChannel>
 40e:	c4 fb       	bst	r28, 4
 410:	44 27       	eor	r20, r20
 412:	40 f9       	bld	r20, 0
 414:	60 e0       	ldi	r22, 0x00	; 0
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	0e 94 4e 03 	call	0x69c	; 0x69c <dio_vidWriteChannel>
 41c:	c5 fb       	bst	r28, 5
 41e:	44 27       	eor	r20, r20
 420:	40 f9       	bld	r20, 0
 422:	61 e0       	ldi	r22, 0x01	; 1
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	0e 94 4e 03 	call	0x69c	; 0x69c <dio_vidWriteChannel>
 42a:	c6 fb       	bst	r28, 6
 42c:	44 27       	eor	r20, r20
 42e:	40 f9       	bld	r20, 0
 430:	62 e0       	ldi	r22, 0x02	; 2
 432:	81 e0       	ldi	r24, 0x01	; 1
 434:	0e 94 4e 03 	call	0x69c	; 0x69c <dio_vidWriteChannel>
 438:	4c 2f       	mov	r20, r28
 43a:	44 1f       	adc	r20, r20
 43c:	44 27       	eor	r20, r20
 43e:	44 1f       	adc	r20, r20
 440:	64 e0       	ldi	r22, 0x04	; 4
 442:	81 e0       	ldi	r24, 0x01	; 1
 444:	0e 94 4e 03 	call	0x69c	; 0x69c <dio_vidWriteChannel>
 448:	0e 94 a6 01 	call	0x34c	; 0x34c <enablePulse>
 44c:	4c 2f       	mov	r20, r28
 44e:	41 70       	andi	r20, 0x01	; 1
 450:	60 e0       	ldi	r22, 0x00	; 0
 452:	81 e0       	ldi	r24, 0x01	; 1
 454:	0e 94 4e 03 	call	0x69c	; 0x69c <dio_vidWriteChannel>
 458:	c1 fb       	bst	r28, 1
 45a:	44 27       	eor	r20, r20
 45c:	40 f9       	bld	r20, 0
 45e:	61 e0       	ldi	r22, 0x01	; 1
 460:	81 e0       	ldi	r24, 0x01	; 1
 462:	0e 94 4e 03 	call	0x69c	; 0x69c <dio_vidWriteChannel>
 466:	c2 fb       	bst	r28, 2
 468:	44 27       	eor	r20, r20
 46a:	40 f9       	bld	r20, 0
 46c:	62 e0       	ldi	r22, 0x02	; 2
 46e:	81 e0       	ldi	r24, 0x01	; 1
 470:	0e 94 4e 03 	call	0x69c	; 0x69c <dio_vidWriteChannel>
 474:	c3 fb       	bst	r28, 3
 476:	44 27       	eor	r20, r20
 478:	40 f9       	bld	r20, 0
 47a:	64 e0       	ldi	r22, 0x04	; 4
 47c:	81 e0       	ldi	r24, 0x01	; 1
 47e:	0e 94 4e 03 	call	0x69c	; 0x69c <dio_vidWriteChannel>
 482:	0e 94 a6 01 	call	0x34c	; 0x34c <enablePulse>
 486:	cf 91       	pop	r28
 488:	08 95       	ret

0000048a <lcd_vidGotoRowColumn>:
 48a:	81 30       	cpi	r24, 0x01	; 1
 48c:	59 f0       	breq	.+22     	; 0x4a4 <lcd_vidGotoRowColumn+0x1a>
 48e:	28 f0       	brcs	.+10     	; 0x49a <lcd_vidGotoRowColumn+0x10>
 490:	82 30       	cpi	r24, 0x02	; 2
 492:	69 f0       	breq	.+26     	; 0x4ae <lcd_vidGotoRowColumn+0x24>
 494:	83 30       	cpi	r24, 0x03	; 3
 496:	81 f0       	breq	.+32     	; 0x4b8 <lcd_vidGotoRowColumn+0x2e>
 498:	08 95       	ret
 49a:	80 e8       	ldi	r24, 0x80	; 128
 49c:	86 0f       	add	r24, r22
 49e:	0e 94 bb 01 	call	0x376	; 0x376 <lcd_vidSendCmd>
 4a2:	08 95       	ret
 4a4:	80 ec       	ldi	r24, 0xC0	; 192
 4a6:	86 0f       	add	r24, r22
 4a8:	0e 94 bb 01 	call	0x376	; 0x376 <lcd_vidSendCmd>
 4ac:	08 95       	ret
 4ae:	84 e9       	ldi	r24, 0x94	; 148
 4b0:	86 0f       	add	r24, r22
 4b2:	0e 94 bb 01 	call	0x376	; 0x376 <lcd_vidSendCmd>
 4b6:	08 95       	ret
 4b8:	84 ed       	ldi	r24, 0xD4	; 212
 4ba:	86 0f       	add	r24, r22
 4bc:	0e 94 bb 01 	call	0x376	; 0x376 <lcd_vidSendCmd>
 4c0:	08 95       	ret

000004c2 <lcd_vidDisplyChar>:
 4c2:	0e 94 00 02 	call	0x400	; 0x400 <lcd_vidSendData>
 4c6:	08 95       	ret

000004c8 <lcd_vidDisplyStr>:
 4c8:	cf 93       	push	r28
 4ca:	df 93       	push	r29
 4cc:	ec 01       	movw	r28, r24
 4ce:	03 c0       	rjmp	.+6      	; 0x4d6 <lcd_vidDisplyStr+0xe>
 4d0:	0e 94 61 02 	call	0x4c2	; 0x4c2 <lcd_vidDisplyChar>
 4d4:	21 96       	adiw	r28, 0x01	; 1
 4d6:	88 81       	ld	r24, Y
 4d8:	81 11       	cpse	r24, r1
 4da:	fa cf       	rjmp	.-12     	; 0x4d0 <lcd_vidDisplyStr+0x8>
 4dc:	df 91       	pop	r29
 4de:	cf 91       	pop	r28
 4e0:	08 95       	ret

000004e2 <lcd_vidCustomWrite>:
 4e2:	0f 93       	push	r16
 4e4:	1f 93       	push	r17
 4e6:	cf 93       	push	r28
 4e8:	df 93       	push	r29
 4ea:	d0 e0       	ldi	r29, 0x00	; 0
 4ec:	1d c0       	rjmp	.+58     	; 0x528 <lcd_vidCustomWrite+0x46>
 4ee:	0d 2f       	mov	r16, r29
 4f0:	10 e0       	ldi	r17, 0x00	; 0
 4f2:	c8 01       	movw	r24, r16
 4f4:	08 96       	adiw	r24, 0x08	; 8
 4f6:	88 0f       	add	r24, r24
 4f8:	88 0f       	add	r24, r24
 4fa:	88 0f       	add	r24, r24
 4fc:	0e 94 bb 01 	call	0x376	; 0x376 <lcd_vidSendCmd>
 500:	c0 e0       	ldi	r28, 0x00	; 0
 502:	0f c0       	rjmp	.+30     	; 0x522 <lcd_vidCustomWrite+0x40>
 504:	f8 01       	movw	r30, r16
 506:	ee 0f       	add	r30, r30
 508:	ff 1f       	adc	r31, r31
 50a:	ee 0f       	add	r30, r30
 50c:	ff 1f       	adc	r31, r31
 50e:	ee 0f       	add	r30, r30
 510:	ff 1f       	adc	r31, r31
 512:	e0 59       	subi	r30, 0x90	; 144
 514:	ff 4f       	sbci	r31, 0xFF	; 255
 516:	ec 0f       	add	r30, r28
 518:	f1 1d       	adc	r31, r1
 51a:	80 81       	ld	r24, Z
 51c:	0e 94 61 02 	call	0x4c2	; 0x4c2 <lcd_vidDisplyChar>
 520:	cf 5f       	subi	r28, 0xFF	; 255
 522:	c8 30       	cpi	r28, 0x08	; 8
 524:	78 f3       	brcs	.-34     	; 0x504 <lcd_vidCustomWrite+0x22>
 526:	df 5f       	subi	r29, 0xFF	; 255
 528:	d8 30       	cpi	r29, 0x08	; 8
 52a:	08 f3       	brcs	.-62     	; 0x4ee <lcd_vidCustomWrite+0xc>
 52c:	df 91       	pop	r29
 52e:	cf 91       	pop	r28
 530:	1f 91       	pop	r17
 532:	0f 91       	pop	r16
 534:	08 95       	ret

00000536 <lcd_vidInit>:
 536:	41 e0       	ldi	r20, 0x01	; 1
 538:	63 e0       	ldi	r22, 0x03	; 3
 53a:	80 e0       	ldi	r24, 0x00	; 0
 53c:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <dio_vidConfigChannel>
 540:	41 e0       	ldi	r20, 0x01	; 1
 542:	62 e0       	ldi	r22, 0x02	; 2
 544:	80 e0       	ldi	r24, 0x00	; 0
 546:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <dio_vidConfigChannel>
 54a:	41 e0       	ldi	r20, 0x01	; 1
 54c:	60 e0       	ldi	r22, 0x00	; 0
 54e:	81 e0       	ldi	r24, 0x01	; 1
 550:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <dio_vidConfigChannel>
 554:	41 e0       	ldi	r20, 0x01	; 1
 556:	61 e0       	ldi	r22, 0x01	; 1
 558:	81 e0       	ldi	r24, 0x01	; 1
 55a:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <dio_vidConfigChannel>
 55e:	41 e0       	ldi	r20, 0x01	; 1
 560:	62 e0       	ldi	r22, 0x02	; 2
 562:	81 e0       	ldi	r24, 0x01	; 1
 564:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <dio_vidConfigChannel>
 568:	41 e0       	ldi	r20, 0x01	; 1
 56a:	64 e0       	ldi	r22, 0x04	; 4
 56c:	81 e0       	ldi	r24, 0x01	; 1
 56e:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <dio_vidConfigChannel>
 572:	8f e5       	ldi	r24, 0x5F	; 95
 574:	9a ee       	ldi	r25, 0xEA	; 234
 576:	01 97       	sbiw	r24, 0x01	; 1
 578:	f1 f7       	brne	.-4      	; 0x576 <lcd_vidInit+0x40>
 57a:	00 c0       	rjmp	.+0      	; 0x57c <lcd_vidInit+0x46>
 57c:	00 00       	nop
 57e:	83 e0       	ldi	r24, 0x03	; 3
 580:	0e 94 bb 01 	call	0x376	; 0x376 <lcd_vidSendCmd>
 584:	8f e1       	ldi	r24, 0x1F	; 31
 586:	9e e4       	ldi	r25, 0x4E	; 78
 588:	01 97       	sbiw	r24, 0x01	; 1
 58a:	f1 f7       	brne	.-4      	; 0x588 <lcd_vidInit+0x52>
 58c:	00 c0       	rjmp	.+0      	; 0x58e <lcd_vidInit+0x58>
 58e:	00 00       	nop
 590:	83 e0       	ldi	r24, 0x03	; 3
 592:	0e 94 bb 01 	call	0x376	; 0x376 <lcd_vidSendCmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 596:	8f e8       	ldi	r24, 0x8F	; 143
 598:	91 e0       	ldi	r25, 0x01	; 1
 59a:	01 97       	sbiw	r24, 0x01	; 1
 59c:	f1 f7       	brne	.-4      	; 0x59a <lcd_vidInit+0x64>
 59e:	00 c0       	rjmp	.+0      	; 0x5a0 <lcd_vidInit+0x6a>
 5a0:	00 00       	nop
 5a2:	83 e0       	ldi	r24, 0x03	; 3
 5a4:	0e 94 bb 01 	call	0x376	; 0x376 <lcd_vidSendCmd>
 5a8:	82 e0       	ldi	r24, 0x02	; 2
 5aa:	0e 94 bb 01 	call	0x376	; 0x376 <lcd_vidSendCmd>
 5ae:	88 e2       	ldi	r24, 0x28	; 40
 5b0:	0e 94 bb 01 	call	0x376	; 0x376 <lcd_vidSendCmd>
 5b4:	0e 94 71 02 	call	0x4e2	; 0x4e2 <lcd_vidCustomWrite>
 5b8:	60 e0       	ldi	r22, 0x00	; 0
 5ba:	80 e0       	ldi	r24, 0x00	; 0
 5bc:	0e 94 45 02 	call	0x48a	; 0x48a <lcd_vidGotoRowColumn>
 5c0:	08 95       	ret

000005c2 <dio_vidConfigChannel>:
 5c2:	81 30       	cpi	r24, 0x01	; 1
 5c4:	01 f1       	breq	.+64     	; 0x606 <dio_vidConfigChannel+0x44>
 5c6:	30 f0       	brcs	.+12     	; 0x5d4 <dio_vidConfigChannel+0x12>
 5c8:	82 30       	cpi	r24, 0x02	; 2
 5ca:	b1 f1       	breq	.+108    	; 0x638 <dio_vidConfigChannel+0x76>
 5cc:	83 30       	cpi	r24, 0x03	; 3
 5ce:	09 f4       	brne	.+2      	; 0x5d2 <dio_vidConfigChannel+0x10>
 5d0:	4c c0       	rjmp	.+152    	; 0x66a <dio_vidConfigChannel+0xa8>
 5d2:	08 95       	ret
 5d4:	41 30       	cpi	r20, 0x01	; 1
 5d6:	59 f4       	brne	.+22     	; 0x5ee <dio_vidConfigChannel+0x2c>
 5d8:	2a b3       	in	r18, 0x1a	; 26
 5da:	81 e0       	ldi	r24, 0x01	; 1
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	02 c0       	rjmp	.+4      	; 0x5e4 <dio_vidConfigChannel+0x22>
 5e0:	88 0f       	add	r24, r24
 5e2:	99 1f       	adc	r25, r25
 5e4:	6a 95       	dec	r22
 5e6:	e2 f7       	brpl	.-8      	; 0x5e0 <dio_vidConfigChannel+0x1e>
 5e8:	82 2b       	or	r24, r18
 5ea:	8a bb       	out	0x1a, r24	; 26
 5ec:	08 95       	ret
 5ee:	2a b3       	in	r18, 0x1a	; 26
 5f0:	81 e0       	ldi	r24, 0x01	; 1
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	02 c0       	rjmp	.+4      	; 0x5fa <dio_vidConfigChannel+0x38>
 5f6:	88 0f       	add	r24, r24
 5f8:	99 1f       	adc	r25, r25
 5fa:	6a 95       	dec	r22
 5fc:	e2 f7       	brpl	.-8      	; 0x5f6 <dio_vidConfigChannel+0x34>
 5fe:	80 95       	com	r24
 600:	82 23       	and	r24, r18
 602:	8a bb       	out	0x1a, r24	; 26
 604:	08 95       	ret
 606:	41 30       	cpi	r20, 0x01	; 1
 608:	59 f4       	brne	.+22     	; 0x620 <dio_vidConfigChannel+0x5e>
 60a:	27 b3       	in	r18, 0x17	; 23
 60c:	81 e0       	ldi	r24, 0x01	; 1
 60e:	90 e0       	ldi	r25, 0x00	; 0
 610:	02 c0       	rjmp	.+4      	; 0x616 <dio_vidConfigChannel+0x54>
 612:	88 0f       	add	r24, r24
 614:	99 1f       	adc	r25, r25
 616:	6a 95       	dec	r22
 618:	e2 f7       	brpl	.-8      	; 0x612 <dio_vidConfigChannel+0x50>
 61a:	82 2b       	or	r24, r18
 61c:	87 bb       	out	0x17, r24	; 23
 61e:	08 95       	ret
 620:	27 b3       	in	r18, 0x17	; 23
 622:	81 e0       	ldi	r24, 0x01	; 1
 624:	90 e0       	ldi	r25, 0x00	; 0
 626:	02 c0       	rjmp	.+4      	; 0x62c <dio_vidConfigChannel+0x6a>
 628:	88 0f       	add	r24, r24
 62a:	99 1f       	adc	r25, r25
 62c:	6a 95       	dec	r22
 62e:	e2 f7       	brpl	.-8      	; 0x628 <dio_vidConfigChannel+0x66>
 630:	80 95       	com	r24
 632:	82 23       	and	r24, r18
 634:	87 bb       	out	0x17, r24	; 23
 636:	08 95       	ret
 638:	41 30       	cpi	r20, 0x01	; 1
 63a:	59 f4       	brne	.+22     	; 0x652 <dio_vidConfigChannel+0x90>
 63c:	24 b3       	in	r18, 0x14	; 20
 63e:	81 e0       	ldi	r24, 0x01	; 1
 640:	90 e0       	ldi	r25, 0x00	; 0
 642:	02 c0       	rjmp	.+4      	; 0x648 <dio_vidConfigChannel+0x86>
 644:	88 0f       	add	r24, r24
 646:	99 1f       	adc	r25, r25
 648:	6a 95       	dec	r22
 64a:	e2 f7       	brpl	.-8      	; 0x644 <dio_vidConfigChannel+0x82>
 64c:	82 2b       	or	r24, r18
 64e:	84 bb       	out	0x14, r24	; 20
 650:	08 95       	ret
 652:	24 b3       	in	r18, 0x14	; 20
 654:	81 e0       	ldi	r24, 0x01	; 1
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	02 c0       	rjmp	.+4      	; 0x65e <dio_vidConfigChannel+0x9c>
 65a:	88 0f       	add	r24, r24
 65c:	99 1f       	adc	r25, r25
 65e:	6a 95       	dec	r22
 660:	e2 f7       	brpl	.-8      	; 0x65a <dio_vidConfigChannel+0x98>
 662:	80 95       	com	r24
 664:	82 23       	and	r24, r18
 666:	84 bb       	out	0x14, r24	; 20
 668:	08 95       	ret
 66a:	41 30       	cpi	r20, 0x01	; 1
 66c:	59 f4       	brne	.+22     	; 0x684 <dio_vidConfigChannel+0xc2>
 66e:	21 b3       	in	r18, 0x11	; 17
 670:	81 e0       	ldi	r24, 0x01	; 1
 672:	90 e0       	ldi	r25, 0x00	; 0
 674:	02 c0       	rjmp	.+4      	; 0x67a <dio_vidConfigChannel+0xb8>
 676:	88 0f       	add	r24, r24
 678:	99 1f       	adc	r25, r25
 67a:	6a 95       	dec	r22
 67c:	e2 f7       	brpl	.-8      	; 0x676 <dio_vidConfigChannel+0xb4>
 67e:	82 2b       	or	r24, r18
 680:	81 bb       	out	0x11, r24	; 17
 682:	08 95       	ret
 684:	21 b3       	in	r18, 0x11	; 17
 686:	81 e0       	ldi	r24, 0x01	; 1
 688:	90 e0       	ldi	r25, 0x00	; 0
 68a:	02 c0       	rjmp	.+4      	; 0x690 <dio_vidConfigChannel+0xce>
 68c:	88 0f       	add	r24, r24
 68e:	99 1f       	adc	r25, r25
 690:	6a 95       	dec	r22
 692:	e2 f7       	brpl	.-8      	; 0x68c <dio_vidConfigChannel+0xca>
 694:	80 95       	com	r24
 696:	82 23       	and	r24, r18
 698:	81 bb       	out	0x11, r24	; 17
 69a:	08 95       	ret

0000069c <dio_vidWriteChannel>:
 69c:	81 30       	cpi	r24, 0x01	; 1
 69e:	01 f1       	breq	.+64     	; 0x6e0 <dio_vidWriteChannel+0x44>
 6a0:	30 f0       	brcs	.+12     	; 0x6ae <dio_vidWriteChannel+0x12>
 6a2:	82 30       	cpi	r24, 0x02	; 2
 6a4:	b1 f1       	breq	.+108    	; 0x712 <dio_vidWriteChannel+0x76>
 6a6:	83 30       	cpi	r24, 0x03	; 3
 6a8:	09 f4       	brne	.+2      	; 0x6ac <dio_vidWriteChannel+0x10>
 6aa:	4c c0       	rjmp	.+152    	; 0x744 <dio_vidWriteChannel+0xa8>
 6ac:	08 95       	ret
 6ae:	41 11       	cpse	r20, r1
 6b0:	0c c0       	rjmp	.+24     	; 0x6ca <dio_vidWriteChannel+0x2e>
 6b2:	2b b3       	in	r18, 0x1b	; 27
 6b4:	81 e0       	ldi	r24, 0x01	; 1
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	02 c0       	rjmp	.+4      	; 0x6be <dio_vidWriteChannel+0x22>
 6ba:	88 0f       	add	r24, r24
 6bc:	99 1f       	adc	r25, r25
 6be:	6a 95       	dec	r22
 6c0:	e2 f7       	brpl	.-8      	; 0x6ba <dio_vidWriteChannel+0x1e>
 6c2:	80 95       	com	r24
 6c4:	82 23       	and	r24, r18
 6c6:	8b bb       	out	0x1b, r24	; 27
 6c8:	08 95       	ret
 6ca:	2b b3       	in	r18, 0x1b	; 27
 6cc:	81 e0       	ldi	r24, 0x01	; 1
 6ce:	90 e0       	ldi	r25, 0x00	; 0
 6d0:	02 c0       	rjmp	.+4      	; 0x6d6 <dio_vidWriteChannel+0x3a>
 6d2:	88 0f       	add	r24, r24
 6d4:	99 1f       	adc	r25, r25
 6d6:	6a 95       	dec	r22
 6d8:	e2 f7       	brpl	.-8      	; 0x6d2 <dio_vidWriteChannel+0x36>
 6da:	82 2b       	or	r24, r18
 6dc:	8b bb       	out	0x1b, r24	; 27
 6de:	08 95       	ret
 6e0:	41 11       	cpse	r20, r1
 6e2:	0c c0       	rjmp	.+24     	; 0x6fc <dio_vidWriteChannel+0x60>
 6e4:	28 b3       	in	r18, 0x18	; 24
 6e6:	81 e0       	ldi	r24, 0x01	; 1
 6e8:	90 e0       	ldi	r25, 0x00	; 0
 6ea:	02 c0       	rjmp	.+4      	; 0x6f0 <dio_vidWriteChannel+0x54>
 6ec:	88 0f       	add	r24, r24
 6ee:	99 1f       	adc	r25, r25
 6f0:	6a 95       	dec	r22
 6f2:	e2 f7       	brpl	.-8      	; 0x6ec <dio_vidWriteChannel+0x50>
 6f4:	80 95       	com	r24
 6f6:	82 23       	and	r24, r18
 6f8:	88 bb       	out	0x18, r24	; 24
 6fa:	08 95       	ret
 6fc:	28 b3       	in	r18, 0x18	; 24
 6fe:	81 e0       	ldi	r24, 0x01	; 1
 700:	90 e0       	ldi	r25, 0x00	; 0
 702:	02 c0       	rjmp	.+4      	; 0x708 <dio_vidWriteChannel+0x6c>
 704:	88 0f       	add	r24, r24
 706:	99 1f       	adc	r25, r25
 708:	6a 95       	dec	r22
 70a:	e2 f7       	brpl	.-8      	; 0x704 <dio_vidWriteChannel+0x68>
 70c:	82 2b       	or	r24, r18
 70e:	88 bb       	out	0x18, r24	; 24
 710:	08 95       	ret
 712:	41 11       	cpse	r20, r1
 714:	0c c0       	rjmp	.+24     	; 0x72e <dio_vidWriteChannel+0x92>
 716:	25 b3       	in	r18, 0x15	; 21
 718:	81 e0       	ldi	r24, 0x01	; 1
 71a:	90 e0       	ldi	r25, 0x00	; 0
 71c:	02 c0       	rjmp	.+4      	; 0x722 <dio_vidWriteChannel+0x86>
 71e:	88 0f       	add	r24, r24
 720:	99 1f       	adc	r25, r25
 722:	6a 95       	dec	r22
 724:	e2 f7       	brpl	.-8      	; 0x71e <dio_vidWriteChannel+0x82>
 726:	80 95       	com	r24
 728:	82 23       	and	r24, r18
 72a:	85 bb       	out	0x15, r24	; 21
 72c:	08 95       	ret
 72e:	25 b3       	in	r18, 0x15	; 21
 730:	81 e0       	ldi	r24, 0x01	; 1
 732:	90 e0       	ldi	r25, 0x00	; 0
 734:	02 c0       	rjmp	.+4      	; 0x73a <dio_vidWriteChannel+0x9e>
 736:	88 0f       	add	r24, r24
 738:	99 1f       	adc	r25, r25
 73a:	6a 95       	dec	r22
 73c:	e2 f7       	brpl	.-8      	; 0x736 <dio_vidWriteChannel+0x9a>
 73e:	82 2b       	or	r24, r18
 740:	85 bb       	out	0x15, r24	; 21
 742:	08 95       	ret
 744:	41 11       	cpse	r20, r1
 746:	0c c0       	rjmp	.+24     	; 0x760 <dio_vidWriteChannel+0xc4>
 748:	22 b3       	in	r18, 0x12	; 18
 74a:	81 e0       	ldi	r24, 0x01	; 1
 74c:	90 e0       	ldi	r25, 0x00	; 0
 74e:	02 c0       	rjmp	.+4      	; 0x754 <dio_vidWriteChannel+0xb8>
 750:	88 0f       	add	r24, r24
 752:	99 1f       	adc	r25, r25
 754:	6a 95       	dec	r22
 756:	e2 f7       	brpl	.-8      	; 0x750 <dio_vidWriteChannel+0xb4>
 758:	80 95       	com	r24
 75a:	82 23       	and	r24, r18
 75c:	82 bb       	out	0x12, r24	; 18
 75e:	08 95       	ret
 760:	22 b3       	in	r18, 0x12	; 18
 762:	81 e0       	ldi	r24, 0x01	; 1
 764:	90 e0       	ldi	r25, 0x00	; 0
 766:	02 c0       	rjmp	.+4      	; 0x76c <dio_vidWriteChannel+0xd0>
 768:	88 0f       	add	r24, r24
 76a:	99 1f       	adc	r25, r25
 76c:	6a 95       	dec	r22
 76e:	e2 f7       	brpl	.-8      	; 0x768 <dio_vidWriteChannel+0xcc>
 770:	82 2b       	or	r24, r18
 772:	82 bb       	out	0x12, r24	; 18
 774:	08 95       	ret

00000776 <UART_Init>:
 776:	90 bd       	out	0x20, r25	; 32
 778:	89 b9       	out	0x09, r24	; 9
 77a:	8a b1       	in	r24, 0x0a	; 10
 77c:	80 61       	ori	r24, 0x10	; 16
 77e:	8a b9       	out	0x0a, r24	; 10
 780:	8a b1       	in	r24, 0x0a	; 10
 782:	88 60       	ori	r24, 0x08	; 8
 784:	8a b9       	out	0x0a, r24	; 10
 786:	80 b5       	in	r24, 0x20	; 32
 788:	86 6a       	ori	r24, 0xA6	; 166
 78a:	80 bd       	out	0x20, r24	; 32
 78c:	8a b1       	in	r24, 0x0a	; 10
 78e:	80 68       	ori	r24, 0x80	; 128
 790:	8a b9       	out	0x0a, r24	; 10
 792:	8a b1       	in	r24, 0x0a	; 10
 794:	80 64       	ori	r24, 0x40	; 64
 796:	8a b9       	out	0x0a, r24	; 10
 798:	08 95       	ret

0000079a <UART_ReceiveChrINT>:
 79a:	8c b1       	in	r24, 0x0c	; 12
 79c:	08 95       	ret

0000079e <UART_setRxCallback>:
 79e:	90 93 fb 00 	sts	0x00FB, r25	; 0x8000fb <rxcPtr+0x1>
 7a2:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <rxcPtr>
 7a6:	08 95       	ret

000007a8 <__vector_15>:
 7a8:	1f 92       	push	r1
 7aa:	0f 92       	push	r0
 7ac:	0f b6       	in	r0, 0x3f	; 63
 7ae:	0f 92       	push	r0
 7b0:	11 24       	eor	r1, r1
 7b2:	2f 93       	push	r18
 7b4:	3f 93       	push	r19
 7b6:	4f 93       	push	r20
 7b8:	5f 93       	push	r21
 7ba:	6f 93       	push	r22
 7bc:	7f 93       	push	r23
 7be:	8f 93       	push	r24
 7c0:	9f 93       	push	r25
 7c2:	af 93       	push	r26
 7c4:	bf 93       	push	r27
 7c6:	ef 93       	push	r30
 7c8:	ff 93       	push	r31
 7ca:	e0 91 fc 00 	lds	r30, 0x00FC	; 0x8000fc <txcPtr>
 7ce:	f0 91 fd 00 	lds	r31, 0x00FD	; 0x8000fd <txcPtr+0x1>
 7d2:	30 97       	sbiw	r30, 0x00	; 0
 7d4:	09 f0       	breq	.+2      	; 0x7d8 <__vector_15+0x30>
 7d6:	09 95       	icall
 7d8:	ff 91       	pop	r31
 7da:	ef 91       	pop	r30
 7dc:	bf 91       	pop	r27
 7de:	af 91       	pop	r26
 7e0:	9f 91       	pop	r25
 7e2:	8f 91       	pop	r24
 7e4:	7f 91       	pop	r23
 7e6:	6f 91       	pop	r22
 7e8:	5f 91       	pop	r21
 7ea:	4f 91       	pop	r20
 7ec:	3f 91       	pop	r19
 7ee:	2f 91       	pop	r18
 7f0:	0f 90       	pop	r0
 7f2:	0f be       	out	0x3f, r0	; 63
 7f4:	0f 90       	pop	r0
 7f6:	1f 90       	pop	r1
 7f8:	18 95       	reti

000007fa <__vector_13>:
 7fa:	1f 92       	push	r1
 7fc:	0f 92       	push	r0
 7fe:	0f b6       	in	r0, 0x3f	; 63
 800:	0f 92       	push	r0
 802:	11 24       	eor	r1, r1
 804:	2f 93       	push	r18
 806:	3f 93       	push	r19
 808:	4f 93       	push	r20
 80a:	5f 93       	push	r21
 80c:	6f 93       	push	r22
 80e:	7f 93       	push	r23
 810:	8f 93       	push	r24
 812:	9f 93       	push	r25
 814:	af 93       	push	r26
 816:	bf 93       	push	r27
 818:	ef 93       	push	r30
 81a:	ff 93       	push	r31
 81c:	e0 91 fa 00 	lds	r30, 0x00FA	; 0x8000fa <rxcPtr>
 820:	f0 91 fb 00 	lds	r31, 0x00FB	; 0x8000fb <rxcPtr+0x1>
 824:	30 97       	sbiw	r30, 0x00	; 0
 826:	09 f0       	breq	.+2      	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 828:	09 95       	icall
 82a:	ff 91       	pop	r31
 82c:	ef 91       	pop	r30
 82e:	bf 91       	pop	r27
 830:	af 91       	pop	r26
 832:	9f 91       	pop	r25
 834:	8f 91       	pop	r24
 836:	7f 91       	pop	r23
 838:	6f 91       	pop	r22
 83a:	5f 91       	pop	r21
 83c:	4f 91       	pop	r20
 83e:	3f 91       	pop	r19
 840:	2f 91       	pop	r18
 842:	0f 90       	pop	r0
 844:	0f be       	out	0x3f, r0	; 63
 846:	0f 90       	pop	r0
 848:	1f 90       	pop	r1
 84a:	18 95       	reti

0000084c <do_rand>:
 84c:	8f 92       	push	r8
 84e:	9f 92       	push	r9
 850:	af 92       	push	r10
 852:	bf 92       	push	r11
 854:	cf 92       	push	r12
 856:	df 92       	push	r13
 858:	ef 92       	push	r14
 85a:	ff 92       	push	r15
 85c:	cf 93       	push	r28
 85e:	df 93       	push	r29
 860:	ec 01       	movw	r28, r24
 862:	68 81       	ld	r22, Y
 864:	79 81       	ldd	r23, Y+1	; 0x01
 866:	8a 81       	ldd	r24, Y+2	; 0x02
 868:	9b 81       	ldd	r25, Y+3	; 0x03
 86a:	61 15       	cp	r22, r1
 86c:	71 05       	cpc	r23, r1
 86e:	81 05       	cpc	r24, r1
 870:	91 05       	cpc	r25, r1
 872:	21 f4       	brne	.+8      	; 0x87c <__stack+0x1d>
 874:	64 e2       	ldi	r22, 0x24	; 36
 876:	79 ed       	ldi	r23, 0xD9	; 217
 878:	8b e5       	ldi	r24, 0x5B	; 91
 87a:	97 e0       	ldi	r25, 0x07	; 7
 87c:	2d e1       	ldi	r18, 0x1D	; 29
 87e:	33 ef       	ldi	r19, 0xF3	; 243
 880:	41 e0       	ldi	r20, 0x01	; 1
 882:	50 e0       	ldi	r21, 0x00	; 0
 884:	0e 94 9a 04 	call	0x934	; 0x934 <__divmodsi4>
 888:	49 01       	movw	r8, r18
 88a:	5a 01       	movw	r10, r20
 88c:	9b 01       	movw	r18, r22
 88e:	ac 01       	movw	r20, r24
 890:	a7 ea       	ldi	r26, 0xA7	; 167
 892:	b1 e4       	ldi	r27, 0x41	; 65
 894:	0e 94 b9 04 	call	0x972	; 0x972 <__muluhisi3>
 898:	6b 01       	movw	r12, r22
 89a:	7c 01       	movw	r14, r24
 89c:	ac ee       	ldi	r26, 0xEC	; 236
 89e:	b4 ef       	ldi	r27, 0xF4	; 244
 8a0:	a5 01       	movw	r20, r10
 8a2:	94 01       	movw	r18, r8
 8a4:	0e 94 c7 04 	call	0x98e	; 0x98e <__mulohisi3>
 8a8:	dc 01       	movw	r26, r24
 8aa:	cb 01       	movw	r24, r22
 8ac:	8c 0d       	add	r24, r12
 8ae:	9d 1d       	adc	r25, r13
 8b0:	ae 1d       	adc	r26, r14
 8b2:	bf 1d       	adc	r27, r15
 8b4:	b7 ff       	sbrs	r27, 7
 8b6:	03 c0       	rjmp	.+6      	; 0x8be <__stack+0x5f>
 8b8:	01 97       	sbiw	r24, 0x01	; 1
 8ba:	a1 09       	sbc	r26, r1
 8bc:	b0 48       	sbci	r27, 0x80	; 128
 8be:	88 83       	st	Y, r24
 8c0:	99 83       	std	Y+1, r25	; 0x01
 8c2:	aa 83       	std	Y+2, r26	; 0x02
 8c4:	bb 83       	std	Y+3, r27	; 0x03
 8c6:	9f 77       	andi	r25, 0x7F	; 127
 8c8:	df 91       	pop	r29
 8ca:	cf 91       	pop	r28
 8cc:	ff 90       	pop	r15
 8ce:	ef 90       	pop	r14
 8d0:	df 90       	pop	r13
 8d2:	cf 90       	pop	r12
 8d4:	bf 90       	pop	r11
 8d6:	af 90       	pop	r10
 8d8:	9f 90       	pop	r9
 8da:	8f 90       	pop	r8
 8dc:	08 95       	ret

000008de <rand_r>:
 8de:	0e 94 26 04 	call	0x84c	; 0x84c <do_rand>
 8e2:	08 95       	ret

000008e4 <rand>:
 8e4:	80 e6       	ldi	r24, 0x60	; 96
 8e6:	90 e0       	ldi	r25, 0x00	; 0
 8e8:	0e 94 26 04 	call	0x84c	; 0x84c <do_rand>
 8ec:	08 95       	ret

000008ee <srand>:
 8ee:	a0 e0       	ldi	r26, 0x00	; 0
 8f0:	b0 e0       	ldi	r27, 0x00	; 0
 8f2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 8f6:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 8fa:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 8fe:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 902:	08 95       	ret

00000904 <memcmp>:
 904:	fb 01       	movw	r30, r22
 906:	dc 01       	movw	r26, r24
 908:	04 c0       	rjmp	.+8      	; 0x912 <memcmp+0xe>
 90a:	8d 91       	ld	r24, X+
 90c:	01 90       	ld	r0, Z+
 90e:	80 19       	sub	r24, r0
 910:	21 f4       	brne	.+8      	; 0x91a <memcmp+0x16>
 912:	41 50       	subi	r20, 0x01	; 1
 914:	50 40       	sbci	r21, 0x00	; 0
 916:	c8 f7       	brcc	.-14     	; 0x90a <memcmp+0x6>
 918:	88 1b       	sub	r24, r24
 91a:	99 0b       	sbc	r25, r25
 91c:	08 95       	ret

0000091e <strcat>:
 91e:	fb 01       	movw	r30, r22
 920:	dc 01       	movw	r26, r24
 922:	0d 90       	ld	r0, X+
 924:	00 20       	and	r0, r0
 926:	e9 f7       	brne	.-6      	; 0x922 <strcat+0x4>
 928:	11 97       	sbiw	r26, 0x01	; 1
 92a:	01 90       	ld	r0, Z+
 92c:	0d 92       	st	X+, r0
 92e:	00 20       	and	r0, r0
 930:	e1 f7       	brne	.-8      	; 0x92a <strcat+0xc>
 932:	08 95       	ret

00000934 <__divmodsi4>:
 934:	05 2e       	mov	r0, r21
 936:	97 fb       	bst	r25, 7
 938:	1e f4       	brtc	.+6      	; 0x940 <__divmodsi4+0xc>
 93a:	00 94       	com	r0
 93c:	0e 94 b1 04 	call	0x962	; 0x962 <__negsi2>
 940:	57 fd       	sbrc	r21, 7
 942:	07 d0       	rcall	.+14     	; 0x952 <__divmodsi4_neg2>
 944:	0e 94 cc 04 	call	0x998	; 0x998 <__udivmodsi4>
 948:	07 fc       	sbrc	r0, 7
 94a:	03 d0       	rcall	.+6      	; 0x952 <__divmodsi4_neg2>
 94c:	4e f4       	brtc	.+18     	; 0x960 <__divmodsi4_exit>
 94e:	0c 94 b1 04 	jmp	0x962	; 0x962 <__negsi2>

00000952 <__divmodsi4_neg2>:
 952:	50 95       	com	r21
 954:	40 95       	com	r20
 956:	30 95       	com	r19
 958:	21 95       	neg	r18
 95a:	3f 4f       	sbci	r19, 0xFF	; 255
 95c:	4f 4f       	sbci	r20, 0xFF	; 255
 95e:	5f 4f       	sbci	r21, 0xFF	; 255

00000960 <__divmodsi4_exit>:
 960:	08 95       	ret

00000962 <__negsi2>:
 962:	90 95       	com	r25
 964:	80 95       	com	r24
 966:	70 95       	com	r23
 968:	61 95       	neg	r22
 96a:	7f 4f       	sbci	r23, 0xFF	; 255
 96c:	8f 4f       	sbci	r24, 0xFF	; 255
 96e:	9f 4f       	sbci	r25, 0xFF	; 255
 970:	08 95       	ret

00000972 <__muluhisi3>:
 972:	0e 94 ee 04 	call	0x9dc	; 0x9dc <__umulhisi3>
 976:	a5 9f       	mul	r26, r21
 978:	90 0d       	add	r25, r0
 97a:	b4 9f       	mul	r27, r20
 97c:	90 0d       	add	r25, r0
 97e:	a4 9f       	mul	r26, r20
 980:	80 0d       	add	r24, r0
 982:	91 1d       	adc	r25, r1
 984:	11 24       	eor	r1, r1
 986:	08 95       	ret

00000988 <__mulshisi3>:
 988:	b7 ff       	sbrs	r27, 7
 98a:	0c 94 b9 04 	jmp	0x972	; 0x972 <__muluhisi3>

0000098e <__mulohisi3>:
 98e:	0e 94 b9 04 	call	0x972	; 0x972 <__muluhisi3>
 992:	82 1b       	sub	r24, r18
 994:	93 0b       	sbc	r25, r19
 996:	08 95       	ret

00000998 <__udivmodsi4>:
 998:	a1 e2       	ldi	r26, 0x21	; 33
 99a:	1a 2e       	mov	r1, r26
 99c:	aa 1b       	sub	r26, r26
 99e:	bb 1b       	sub	r27, r27
 9a0:	fd 01       	movw	r30, r26
 9a2:	0d c0       	rjmp	.+26     	; 0x9be <__udivmodsi4_ep>

000009a4 <__udivmodsi4_loop>:
 9a4:	aa 1f       	adc	r26, r26
 9a6:	bb 1f       	adc	r27, r27
 9a8:	ee 1f       	adc	r30, r30
 9aa:	ff 1f       	adc	r31, r31
 9ac:	a2 17       	cp	r26, r18
 9ae:	b3 07       	cpc	r27, r19
 9b0:	e4 07       	cpc	r30, r20
 9b2:	f5 07       	cpc	r31, r21
 9b4:	20 f0       	brcs	.+8      	; 0x9be <__udivmodsi4_ep>
 9b6:	a2 1b       	sub	r26, r18
 9b8:	b3 0b       	sbc	r27, r19
 9ba:	e4 0b       	sbc	r30, r20
 9bc:	f5 0b       	sbc	r31, r21

000009be <__udivmodsi4_ep>:
 9be:	66 1f       	adc	r22, r22
 9c0:	77 1f       	adc	r23, r23
 9c2:	88 1f       	adc	r24, r24
 9c4:	99 1f       	adc	r25, r25
 9c6:	1a 94       	dec	r1
 9c8:	69 f7       	brne	.-38     	; 0x9a4 <__udivmodsi4_loop>
 9ca:	60 95       	com	r22
 9cc:	70 95       	com	r23
 9ce:	80 95       	com	r24
 9d0:	90 95       	com	r25
 9d2:	9b 01       	movw	r18, r22
 9d4:	ac 01       	movw	r20, r24
 9d6:	bd 01       	movw	r22, r26
 9d8:	cf 01       	movw	r24, r30
 9da:	08 95       	ret

000009dc <__umulhisi3>:
 9dc:	a2 9f       	mul	r26, r18
 9de:	b0 01       	movw	r22, r0
 9e0:	b3 9f       	mul	r27, r19
 9e2:	c0 01       	movw	r24, r0
 9e4:	a3 9f       	mul	r26, r19
 9e6:	70 0d       	add	r23, r0
 9e8:	81 1d       	adc	r24, r1
 9ea:	11 24       	eor	r1, r1
 9ec:	91 1d       	adc	r25, r1
 9ee:	b2 9f       	mul	r27, r18
 9f0:	70 0d       	add	r23, r0
 9f2:	81 1d       	adc	r24, r1
 9f4:	11 24       	eor	r1, r1
 9f6:	91 1d       	adc	r25, r1
 9f8:	08 95       	ret

000009fa <_exit>:
 9fa:	f8 94       	cli

000009fc <__stop_program>:
 9fc:	ff cf       	rjmp	.-2      	; 0x9fc <__stop_program>
