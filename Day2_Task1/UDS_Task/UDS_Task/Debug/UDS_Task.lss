
UDS_Task.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000090  00800060  000009f6  00000a8a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003d  008000f0  008000f0  00000b1a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b1a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b4c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  00000b88  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a6d  00000000  00000000  00000ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a52  00000000  00000000  0000274d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b1f  00000000  00000000  0000319f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000030c  00000000  00000000  00003cc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007f6  00000000  00000000  00003fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000af4  00000000  00000000  000047c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  000052b6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 f9 03 	jmp	0x7f2	; 0x7f2 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 d0 03 	jmp	0x7a0	; 0x7a0 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ef       	ldi	r30, 0xF6	; 246
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3f       	cpi	r26, 0xF0	; 240
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a0 ef       	ldi	r26, 0xF0	; 240
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 32       	cpi	r26, 0x2D	; 45
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 c2 00 	call	0x184	; 0x184 <main>
  8a:	0c 94 f9 04 	jmp	0x9f2	; 0x9f2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <time>:
  92:	fc 01       	movw	r30, r24
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	f8 94       	cli
  98:	60 91 29 01 	lds	r22, 0x0129	; 0x800129 <__system_time>
  9c:	70 91 2a 01 	lds	r23, 0x012A	; 0x80012a <__system_time+0x1>
  a0:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <__system_time+0x2>
  a4:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <__system_time+0x3>
  a8:	0f be       	out	0x3f, r0	; 63
  aa:	30 97       	sbiw	r30, 0x00	; 0
  ac:	21 f0       	breq	.+8      	; 0xb6 <time+0x24>
  ae:	60 83       	st	Z, r22
  b0:	71 83       	std	Z+1, r23	; 0x01
  b2:	82 83       	std	Z+2, r24	; 0x02
  b4:	93 83       	std	Z+3, r25	; 0x03
  b6:	08 95       	ret

000000b8 <RX_CallBack>:

}

void RX_CallBack(void)
{
	u8 temp = UART_ReceiveChrINT();
  b8:	0e 94 c9 03 	call	0x792	; 0x792 <UART_ReceiveChrINT>
	if(temp == '\r')
  bc:	8d 30       	cpi	r24, 0x0D	; 13
  be:	61 f4       	brne	.+24     	; 0xd8 <RX_CallBack+0x20>
	{
		data[RX_Index] = '\0';
  c0:	e0 91 f3 00 	lds	r30, 0x00F3	; 0x8000f3 <RX_Index>
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	ef 5f       	subi	r30, 0xFF	; 255
  c8:	fe 4f       	sbci	r31, 0xFE	; 254
  ca:	10 82       	st	Z, r1
		doneFlag = 1;
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <doneFlag>
		lcd_vidSendCmd(_LCD_CLEAR);
  d2:	0e 94 b7 01 	call	0x36e	; 0x36e <lcd_vidSendCmd>
  d6:	08 95       	ret
	}
	else if(temp == 0x08)
  d8:	88 30       	cpi	r24, 0x08	; 8
  da:	51 f4       	brne	.+20     	; 0xf0 <RX_CallBack+0x38>
	{
		data[--RX_Index] = '\0';
  dc:	e0 91 f3 00 	lds	r30, 0x00F3	; 0x8000f3 <RX_Index>
  e0:	e1 50       	subi	r30, 0x01	; 1
  e2:	e0 93 f3 00 	sts	0x00F3, r30	; 0x8000f3 <RX_Index>
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	ef 5f       	subi	r30, 0xFF	; 255
  ea:	fe 4f       	sbci	r31, 0xFE	; 254
  ec:	10 82       	st	Z, r1
  ee:	08 95       	ret
	}
	else
	{
		data[RX_Index] = temp;
  f0:	e0 91 f3 00 	lds	r30, 0x00F3	; 0x8000f3 <RX_Index>
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	ef 5f       	subi	r30, 0xFF	; 255
  f8:	fe 4f       	sbci	r31, 0xFE	; 254
  fa:	80 83       	st	Z, r24
		RX_Index++;
  fc:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <RX_Index>
 100:	8f 5f       	subi	r24, 0xFF	; 255
 102:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <RX_Index>
 106:	08 95       	ret

00000108 <int2HexStr>:
    }
	return 0;
}

void int2HexStr(unsigned long num, char *str)
{
 108:	0f 93       	push	r16
 10a:	1f 93       	push	r17
 10c:	cf 93       	push	r28
 10e:	df 93       	push	r29
 110:	8b 01       	movw	r16, r22
 112:	9c 01       	movw	r18, r24
 114:	fa 01       	movw	r30, r20

	int i = 12;
 116:	8c e0       	ldi	r24, 0x0C	; 12
 118:	90 e0       	ldi	r25, 0x00	; 0
	int j = 0;

	do{
		str[i] = "0123456789ABCDEF"[num % 16];
 11a:	df 01       	movw	r26, r30
 11c:	a8 0f       	add	r26, r24
 11e:	b9 1f       	adc	r27, r25
 120:	b9 01       	movw	r22, r18
 122:	a8 01       	movw	r20, r16
 124:	4f 70       	andi	r20, 0x0F	; 15
 126:	55 27       	eor	r21, r21
 128:	66 27       	eor	r22, r22
 12a:	77 27       	eor	r23, r23
 12c:	ea 01       	movw	r28, r20
 12e:	c0 55       	subi	r28, 0x50	; 80
 130:	df 4f       	sbci	r29, 0xFF	; 255
 132:	48 81       	ld	r20, Y
 134:	4c 93       	st	X, r20
		i--;
 136:	01 97       	sbiw	r24, 0x01	; 1
		num = num/16;
 138:	68 94       	set
 13a:	13 f8       	bld	r1, 3
 13c:	36 95       	lsr	r19
 13e:	27 95       	ror	r18
 140:	17 95       	ror	r17
 142:	07 95       	ror	r16
 144:	16 94       	lsr	r1
 146:	d1 f7       	brne	.-12     	; 0x13c <int2HexStr+0x34>
	}while( num > 0);
 148:	01 15       	cp	r16, r1
 14a:	11 05       	cpc	r17, r1
 14c:	21 05       	cpc	r18, r1
 14e:	31 05       	cpc	r19, r1
 150:	21 f7       	brne	.-56     	; 0x11a <int2HexStr+0x12>
 152:	20 e0       	ldi	r18, 0x00	; 0
 154:	30 e0       	ldi	r19, 0x00	; 0
 156:	0a c0       	rjmp	.+20     	; 0x16c <int2HexStr+0x64>

	while( ++i < 13){
		str[j++] = str[i];
 158:	df 01       	movw	r26, r30
 15a:	a2 0f       	add	r26, r18
 15c:	b3 1f       	adc	r27, r19
 15e:	ef 01       	movw	r28, r30
 160:	c8 0f       	add	r28, r24
 162:	d9 1f       	adc	r29, r25
 164:	48 81       	ld	r20, Y
 166:	4c 93       	st	X, r20
 168:	2f 5f       	subi	r18, 0xFF	; 255
 16a:	3f 4f       	sbci	r19, 0xFF	; 255
		str[i] = "0123456789ABCDEF"[num % 16];
		i--;
		num = num/16;
	}while( num > 0);

	while( ++i < 13){
 16c:	01 96       	adiw	r24, 0x01	; 1
 16e:	8d 30       	cpi	r24, 0x0D	; 13
 170:	91 05       	cpc	r25, r1
 172:	94 f3       	brlt	.-28     	; 0x158 <int2HexStr+0x50>
		str[j++] = str[i];
	}

	str[j] = 0;
 174:	e2 0f       	add	r30, r18
 176:	f3 1f       	adc	r31, r19
 178:	10 82       	st	Z, r1

}
 17a:	df 91       	pop	r29
 17c:	cf 91       	pop	r28
 17e:	1f 91       	pop	r17
 180:	0f 91       	pop	r16
 182:	08 95       	ret

00000184 <main>:


int main(void)
{
	int random_number;
	dio_vidConfigChannel(DIO_PORTC,DIO_PIN7,OUTPUT);
 184:	41 e0       	ldi	r20, 0x01	; 1
 186:	67 e0       	ldi	r22, 0x07	; 7
 188:	82 e0       	ldi	r24, 0x02	; 2
 18a:	0e 94 dd 02 	call	0x5ba	; 0x5ba <dio_vidConfigChannel>
	dio_vidWriteChannel(DIO_PORTC,DIO_PIN7,STD_LOW);
 18e:	40 e0       	ldi	r20, 0x00	; 0
 190:	67 e0       	ldi	r22, 0x07	; 7
 192:	82 e0       	ldi	r24, 0x02	; 2
 194:	0e 94 4a 03 	call	0x694	; 0x694 <dio_vidWriteChannel>
	lcd_vidInit();
 198:	0e 94 97 02 	call	0x52e	; 0x52e <lcd_vidInit>
	UART_setRxCallback(RX_CallBack);
 19c:	8c e5       	ldi	r24, 0x5C	; 92
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	0e 94 cb 03 	call	0x796	; 0x796 <UART_setRxCallback>
	UART_Init(UART_BAUDRATE_9600);
 1a4:	87 e6       	ldi	r24, 0x67	; 103
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	0e 94 b7 03 	call	0x76e	; 0x76e <UART_Init>
    srand(time(NULL));
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	0e 94 49 00 	call	0x92	; 0x92 <time>
 1b4:	0e 94 73 04 	call	0x8e6	; 0x8e6 <srand>
    random_number = rand();
 1b8:	0e 94 6e 04 	call	0x8dc	; 0x8dc <rand>
	int2HexStr(random_number , sendstr );
 1bc:	bc 01       	movw	r22, r24
 1be:	99 0f       	add	r25, r25
 1c0:	88 0b       	sbc	r24, r24
 1c2:	99 0b       	sbc	r25, r25
 1c4:	45 e1       	ldi	r20, 0x15	; 21
 1c6:	51 e0       	ldi	r21, 0x01	; 1
 1c8:	0e 94 84 00 	call	0x108	; 0x108 <int2HexStr>
    while (1) 
    {
		if( doneFlag == 1 )
 1cc:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <doneFlag>
 1d0:	81 30       	cpi	r24, 0x01	; 1
 1d2:	e1 f7       	brne	.-8      	; 0x1cc <main+0x48>
		{
			doneFlag = 0;
 1d4:	10 92 f2 00 	sts	0x00F2, r1	; 0x8000f2 <doneFlag>
			if(memcmp(data, "2701", 4) == 0)
 1d8:	44 e0       	ldi	r20, 0x04	; 4
 1da:	50 e0       	ldi	r21, 0x00	; 0
 1dc:	61 ec       	ldi	r22, 0xC1	; 193
 1de:	70 e0       	ldi	r23, 0x00	; 0
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	91 e0       	ldi	r25, 0x01	; 1
 1e4:	0e 94 7e 04 	call	0x8fc	; 0x8fc <memcmp>
 1e8:	89 2b       	or	r24, r25
 1ea:	09 f0       	breq	.+2      	; 0x1ee <main+0x6a>
 1ec:	5b c0       	rjmp	.+182    	; 0x2a4 <main+0x120>
			{
				strcat(successfulAccess, sendstr);
 1ee:	65 e1       	ldi	r22, 0x15	; 21
 1f0:	71 e0       	ldi	r23, 0x01	; 1
 1f2:	84 e6       	ldi	r24, 0x64	; 100
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	0e 94 8b 04 	call	0x916	; 0x916 <strcat>
				lcd_vidDisplyStr(successfulAccess);
 1fa:	84 e6       	ldi	r24, 0x64	; 100
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	0e 94 60 02 	call	0x4c0	; 0x4c0 <lcd_vidDisplyStr>
				for(u8 i = 4; i < 12; i++)
 202:	54 e0       	ldi	r21, 0x04	; 4
 204:	41 c0       	rjmp	.+130    	; 0x288 <main+0x104>
				{
					if(successfulAccess[i] > '9')
 206:	25 2f       	mov	r18, r21
 208:	30 e0       	ldi	r19, 0x00	; 0
 20a:	f9 01       	movw	r30, r18
 20c:	ec 59       	subi	r30, 0x9C	; 156
 20e:	ff 4f       	sbci	r31, 0xFF	; 255
 210:	80 81       	ld	r24, Z
 212:	8a 33       	cpi	r24, 0x3A	; 58
 214:	30 f0       	brcs	.+12     	; 0x222 <main+0x9e>
					{
						successfulAccess[i] = successfulAccess[i] - 'A' + 10;
 216:	f9 01       	movw	r30, r18
 218:	ec 59       	subi	r30, 0x9C	; 156
 21a:	ff 4f       	sbci	r31, 0xFF	; 255
 21c:	87 53       	subi	r24, 0x37	; 55
 21e:	80 83       	st	Z, r24
 220:	05 c0       	rjmp	.+10     	; 0x22c <main+0xa8>
					}
					else
					{
						successfulAccess[i] -= '0';
 222:	f9 01       	movw	r30, r18
 224:	ec 59       	subi	r30, 0x9C	; 156
 226:	ff 4f       	sbci	r31, 0xFF	; 255
 228:	80 53       	subi	r24, 0x30	; 48
 22a:	80 83       	st	Z, r24
					}
					if(key[i-4] > '9')
 22c:	c9 01       	movw	r24, r18
 22e:	04 97       	sbiw	r24, 0x04	; 4
 230:	fc 01       	movw	r30, r24
 232:	e7 59       	subi	r30, 0x97	; 151
 234:	ff 4f       	sbci	r31, 0xFF	; 255
 236:	40 81       	ld	r20, Z
 238:	4a 33       	cpi	r20, 0x3A	; 58
 23a:	30 f0       	brcs	.+12     	; 0x248 <main+0xc4>
					{
						key[i-4] = key[i-4] - 'A' + 10;
 23c:	fc 01       	movw	r30, r24
 23e:	e7 59       	subi	r30, 0x97	; 151
 240:	ff 4f       	sbci	r31, 0xFF	; 255
 242:	47 53       	subi	r20, 0x37	; 55
 244:	40 83       	st	Z, r20
 246:	05 c0       	rjmp	.+10     	; 0x252 <main+0xce>
					}
					else
					{
						key[i-4] -= '0';
 248:	fc 01       	movw	r30, r24
 24a:	e7 59       	subi	r30, 0x97	; 151
 24c:	ff 4f       	sbci	r31, 0xFF	; 255
 24e:	40 53       	subi	r20, 0x30	; 48
 250:	40 83       	st	Z, r20
					}

					cipher[i-4]= successfulAccess[i] ^ key[i-4];
 252:	f9 01       	movw	r30, r18
 254:	ec 59       	subi	r30, 0x9C	; 156
 256:	ff 4f       	sbci	r31, 0xFF	; 255
 258:	30 81       	ld	r19, Z
 25a:	fc 01       	movw	r30, r24
 25c:	e7 59       	subi	r30, 0x97	; 151
 25e:	ff 4f       	sbci	r31, 0xFF	; 255
 260:	20 81       	ld	r18, Z
 262:	23 27       	eor	r18, r19
 264:	fc 01       	movw	r30, r24
 266:	e8 50       	subi	r30, 0x08	; 8
 268:	ff 4f       	sbci	r31, 0xFF	; 255
 26a:	20 83       	st	Z, r18

					if(cipher[i-4] > 9)
 26c:	2a 30       	cpi	r18, 0x0A	; 10
 26e:	30 f0       	brcs	.+12     	; 0x27c <main+0xf8>
					{
						cipher[i-4] = cipher[i-4] - 10 +'A';
 270:	fc 01       	movw	r30, r24
 272:	e8 50       	subi	r30, 0x08	; 8
 274:	ff 4f       	sbci	r31, 0xFF	; 255
 276:	29 5c       	subi	r18, 0xC9	; 201
 278:	20 83       	st	Z, r18
 27a:	05 c0       	rjmp	.+10     	; 0x286 <main+0x102>
					}
					else
					{
						cipher[i-4] += '0';
 27c:	fc 01       	movw	r30, r24
 27e:	e8 50       	subi	r30, 0x08	; 8
 280:	ff 4f       	sbci	r31, 0xFF	; 255
 282:	20 5d       	subi	r18, 0xD0	; 208
 284:	20 83       	st	Z, r18
			doneFlag = 0;
			if(memcmp(data, "2701", 4) == 0)
			{
				strcat(successfulAccess, sendstr);
				lcd_vidDisplyStr(successfulAccess);
				for(u8 i = 4; i < 12; i++)
 286:	5f 5f       	subi	r21, 0xFF	; 255
 288:	5c 30       	cpi	r21, 0x0C	; 12
 28a:	08 f4       	brcc	.+2      	; 0x28e <main+0x10a>
 28c:	bc cf       	rjmp	.-136    	; 0x206 <main+0x82>
					else
					{
						cipher[i-4] += '0';
					}
				}
				cipher[8] = '\0';
 28e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <cipher+0x8>
				lcd_vidGotoRowColumn(1,0);
 292:	60 e0       	ldi	r22, 0x00	; 0
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	0e 94 41 02 	call	0x482	; 0x482 <lcd_vidGotoRowColumn>
				lcd_vidDisplyStr(cipher);
 29a:	88 ef       	ldi	r24, 0xF8	; 248
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	0e 94 60 02 	call	0x4c0	; 0x4c0 <lcd_vidDisplyStr>
 2a2:	4d c0       	rjmp	.+154    	; 0x33e <main+0x1ba>
			}
			else if(memcmp(data, "3101AA00", 8) == 0)
 2a4:	48 e0       	ldi	r20, 0x08	; 8
 2a6:	50 e0       	ldi	r21, 0x00	; 0
 2a8:	66 ec       	ldi	r22, 0xC6	; 198
 2aa:	70 e0       	ldi	r23, 0x00	; 0
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	91 e0       	ldi	r25, 0x01	; 1
 2b0:	0e 94 7e 04 	call	0x8fc	; 0x8fc <memcmp>
 2b4:	89 2b       	or	r24, r25
 2b6:	99 f4       	brne	.+38     	; 0x2de <main+0x15a>
			{
				if(securityAccess == 1)
 2b8:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <securityAccess>
 2bc:	81 30       	cpi	r24, 0x01	; 1
 2be:	51 f4       	brne	.+20     	; 0x2d4 <main+0x150>
				{
					lcd_vidDisplyStr((u8*)"7101AA00");
 2c0:	8f ec       	ldi	r24, 0xCF	; 207
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	0e 94 60 02 	call	0x4c0	; 0x4c0 <lcd_vidDisplyStr>
					dio_vidWriteChannel(DIO_PORTC,DIO_PIN7,STD_HIGH);
 2c8:	41 e0       	ldi	r20, 0x01	; 1
 2ca:	67 e0       	ldi	r22, 0x07	; 7
 2cc:	82 e0       	ldi	r24, 0x02	; 2
 2ce:	0e 94 4a 03 	call	0x694	; 0x694 <dio_vidWriteChannel>
 2d2:	35 c0       	rjmp	.+106    	; 0x33e <main+0x1ba>
				}
				else
				{
					lcd_vidDisplyStr((u8*)"7F3135");
 2d4:	88 ed       	ldi	r24, 0xD8	; 216
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	0e 94 60 02 	call	0x4c0	; 0x4c0 <lcd_vidDisplyStr>
 2dc:	30 c0       	rjmp	.+96     	; 0x33e <main+0x1ba>
				}
			}
			else if(memcmp(data, "2702", 4) == 0)
 2de:	44 e0       	ldi	r20, 0x04	; 4
 2e0:	50 e0       	ldi	r21, 0x00	; 0
 2e2:	6f ed       	ldi	r22, 0xDF	; 223
 2e4:	70 e0       	ldi	r23, 0x00	; 0
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	91 e0       	ldi	r25, 0x01	; 1
 2ea:	0e 94 7e 04 	call	0x8fc	; 0x8fc <memcmp>
 2ee:	89 2b       	or	r24, r25
 2f0:	99 f0       	breq	.+38     	; 0x318 <main+0x194>
 2f2:	25 c0       	rjmp	.+74     	; 0x33e <main+0x1ba>
			{
				for(u8 i = 4; i < 12; i++)
				{
					if(cipher[i-4] != data[i])
 2f4:	82 2f       	mov	r24, r18
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	fc 01       	movw	r30, r24
 2fa:	ec 50       	subi	r30, 0x0C	; 12
 2fc:	ff 4f       	sbci	r31, 0xFF	; 255
 2fe:	30 81       	ld	r19, Z
 300:	fc 01       	movw	r30, r24
 302:	ef 5f       	subi	r30, 0xFF	; 255
 304:	fe 4f       	sbci	r31, 0xFE	; 254
 306:	80 81       	ld	r24, Z
 308:	38 17       	cp	r19, r24
 30a:	21 f0       	breq	.+8      	; 0x314 <main+0x190>
					{
						errorFlag = 1;
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__data_end>
						break;
 312:	05 c0       	rjmp	.+10     	; 0x31e <main+0x19a>
					lcd_vidDisplyStr((u8*)"7F3135");
				}
			}
			else if(memcmp(data, "2702", 4) == 0)
			{
				for(u8 i = 4; i < 12; i++)
 314:	2f 5f       	subi	r18, 0xFF	; 255
 316:	01 c0       	rjmp	.+2      	; 0x31a <main+0x196>
 318:	24 e0       	ldi	r18, 0x04	; 4
 31a:	2c 30       	cpi	r18, 0x0C	; 12
 31c:	58 f3       	brcs	.-42     	; 0x2f4 <main+0x170>
					{
						errorFlag = 1;
						break;
					}
				}
				if(errorFlag == 0)
 31e:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__data_end>
 322:	81 11       	cpse	r24, r1
 324:	08 c0       	rjmp	.+16     	; 0x336 <main+0x1b2>
				{
					lcd_vidDisplyStr((u8*)"6702");
 326:	84 ee       	ldi	r24, 0xE4	; 228
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	0e 94 60 02 	call	0x4c0	; 0x4c0 <lcd_vidDisplyStr>
					securityAccess = 1;
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <securityAccess>
 334:	04 c0       	rjmp	.+8      	; 0x33e <main+0x1ba>
				}
				else
				{
					lcd_vidDisplyStr((u8*)"7F2735");
 336:	89 ee       	ldi	r24, 0xE9	; 233
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	0e 94 60 02 	call	0x4c0	; 0x4c0 <lcd_vidDisplyStr>
				}

			}
			RX_Index = 0;
 33e:	10 92 f3 00 	sts	0x00F3, r1	; 0x8000f3 <RX_Index>
 342:	44 cf       	rjmp	.-376    	; 0x1cc <main+0x48>

00000344 <enablePulse>:
* \Return value:   : None                                 
*******************************************************************************/

static void enablePulse(void)
{
	dio_vidWriteChannel(LCD_EN_PORT, LCD_EN_CHANNEL, STD_HIGH);
 344:	41 e0       	ldi	r20, 0x01	; 1
 346:	62 e0       	ldi	r22, 0x02	; 2
 348:	80 e0       	ldi	r24, 0x00	; 0
 34a:	0e 94 4a 03 	call	0x694	; 0x694 <dio_vidWriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 34e:	85 e0       	ldi	r24, 0x05	; 5
 350:	8a 95       	dec	r24
 352:	f1 f7       	brne	.-4      	; 0x350 <enablePulse+0xc>
 354:	00 00       	nop
	_delay_us(1);
	dio_vidWriteChannel(LCD_EN_PORT, LCD_EN_CHANNEL, STD_LOW);
 356:	40 e0       	ldi	r20, 0x00	; 0
 358:	62 e0       	ldi	r22, 0x02	; 2
 35a:	80 e0       	ldi	r24, 0x00	; 0
 35c:	0e 94 4a 03 	call	0x694	; 0x694 <dio_vidWriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 360:	8f e3       	ldi	r24, 0x3F	; 63
 362:	9f e1       	ldi	r25, 0x1F	; 31
 364:	01 97       	sbiw	r24, 0x01	; 1
 366:	f1 f7       	brne	.-4      	; 0x364 <enablePulse+0x20>
 368:	00 c0       	rjmp	.+0      	; 0x36a <enablePulse+0x26>
 36a:	00 00       	nop
 36c:	08 95       	ret

0000036e <lcd_vidSendCmd>:
* \Reentrancy      : Non Reentrant                                             
* \Parameters (in) : cmd	-> LCD command ID                                                                        
* \Return value:   : None                                 
*******************************************************************************/
void lcd_vidSendCmd(lcd_cmd_t cmd)
{
 36e:	cf 93       	push	r28
 370:	c8 2f       	mov	r28, r24
	/*	RS -> Command Mode	*/
	dio_vidWriteChannel(LCD_RS_PORT,LCD_RS_CHANNEL,STD_LOW);
 372:	40 e0       	ldi	r20, 0x00	; 0
 374:	63 e0       	ldi	r22, 0x03	; 3
 376:	80 e0       	ldi	r24, 0x00	; 0
 378:	0e 94 4a 03 	call	0x694	; 0x694 <dio_vidWriteChannel>

	dio_vidWriteChannel(LCD_D4_PORT,LCD_D4_CHANNEL,CHECK_BIT(cmd,4));
 37c:	c4 fb       	bst	r28, 4
 37e:	44 27       	eor	r20, r20
 380:	40 f9       	bld	r20, 0
 382:	60 e0       	ldi	r22, 0x00	; 0
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	0e 94 4a 03 	call	0x694	; 0x694 <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D5_CHANNEL,CHECK_BIT(cmd,5));
 38a:	c5 fb       	bst	r28, 5
 38c:	44 27       	eor	r20, r20
 38e:	40 f9       	bld	r20, 0
 390:	61 e0       	ldi	r22, 0x01	; 1
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	0e 94 4a 03 	call	0x694	; 0x694 <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D6_CHANNEL,CHECK_BIT(cmd,6));
 398:	c6 fb       	bst	r28, 6
 39a:	44 27       	eor	r20, r20
 39c:	40 f9       	bld	r20, 0
 39e:	62 e0       	ldi	r22, 0x02	; 2
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	0e 94 4a 03 	call	0x694	; 0x694 <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D7_CHANNEL,CHECK_BIT(cmd,7));
 3a6:	4c 2f       	mov	r20, r28
 3a8:	44 1f       	adc	r20, r20
 3aa:	44 27       	eor	r20, r20
 3ac:	44 1f       	adc	r20, r20
 3ae:	64 e0       	ldi	r22, 0x04	; 4
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	0e 94 4a 03 	call	0x694	; 0x694 <dio_vidWriteChannel>
	
	enablePulse();
 3b6:	0e 94 a2 01 	call	0x344	; 0x344 <enablePulse>
	
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D4_CHANNEL,CHECK_BIT(cmd,0));
 3ba:	4c 2f       	mov	r20, r28
 3bc:	41 70       	andi	r20, 0x01	; 1
 3be:	60 e0       	ldi	r22, 0x00	; 0
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	0e 94 4a 03 	call	0x694	; 0x694 <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D5_CHANNEL,CHECK_BIT(cmd,1));
 3c6:	c1 fb       	bst	r28, 1
 3c8:	44 27       	eor	r20, r20
 3ca:	40 f9       	bld	r20, 0
 3cc:	61 e0       	ldi	r22, 0x01	; 1
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	0e 94 4a 03 	call	0x694	; 0x694 <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D6_CHANNEL,CHECK_BIT(cmd,2));
 3d4:	c2 fb       	bst	r28, 2
 3d6:	44 27       	eor	r20, r20
 3d8:	40 f9       	bld	r20, 0
 3da:	62 e0       	ldi	r22, 0x02	; 2
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	0e 94 4a 03 	call	0x694	; 0x694 <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D7_CHANNEL,CHECK_BIT(cmd,3));
 3e2:	c3 fb       	bst	r28, 3
 3e4:	44 27       	eor	r20, r20
 3e6:	40 f9       	bld	r20, 0
 3e8:	64 e0       	ldi	r22, 0x04	; 4
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	0e 94 4a 03 	call	0x694	; 0x694 <dio_vidWriteChannel>
	
	enablePulse();
 3f0:	0e 94 a2 01 	call	0x344	; 0x344 <enablePulse>
}
 3f4:	cf 91       	pop	r28
 3f6:	08 95       	ret

000003f8 <lcd_vidSendData>:
* \Reentrancy      : Non Reentrant                                             
* \Parameters (in) : data	-> LCD data input                                                                       
* \Return value:   : None                                 
*******************************************************************************/
void lcd_vidSendData(u8 data)
{
 3f8:	cf 93       	push	r28
 3fa:	c8 2f       	mov	r28, r24
	/*	RS -> Data Mode	*/
	dio_vidWriteChannel(LCD_RS_PORT,LCD_RS_CHANNEL,STD_HIGH);
 3fc:	41 e0       	ldi	r20, 0x01	; 1
 3fe:	63 e0       	ldi	r22, 0x03	; 3
 400:	80 e0       	ldi	r24, 0x00	; 0
 402:	0e 94 4a 03 	call	0x694	; 0x694 <dio_vidWriteChannel>

	dio_vidWriteChannel(LCD_D4_PORT,LCD_D4_CHANNEL,CHECK_BIT(data,4));
 406:	c4 fb       	bst	r28, 4
 408:	44 27       	eor	r20, r20
 40a:	40 f9       	bld	r20, 0
 40c:	60 e0       	ldi	r22, 0x00	; 0
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	0e 94 4a 03 	call	0x694	; 0x694 <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D5_CHANNEL,CHECK_BIT(data,5));
 414:	c5 fb       	bst	r28, 5
 416:	44 27       	eor	r20, r20
 418:	40 f9       	bld	r20, 0
 41a:	61 e0       	ldi	r22, 0x01	; 1
 41c:	81 e0       	ldi	r24, 0x01	; 1
 41e:	0e 94 4a 03 	call	0x694	; 0x694 <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D6_CHANNEL,CHECK_BIT(data,6));
 422:	c6 fb       	bst	r28, 6
 424:	44 27       	eor	r20, r20
 426:	40 f9       	bld	r20, 0
 428:	62 e0       	ldi	r22, 0x02	; 2
 42a:	81 e0       	ldi	r24, 0x01	; 1
 42c:	0e 94 4a 03 	call	0x694	; 0x694 <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D7_CHANNEL,CHECK_BIT(data,7));
 430:	4c 2f       	mov	r20, r28
 432:	44 1f       	adc	r20, r20
 434:	44 27       	eor	r20, r20
 436:	44 1f       	adc	r20, r20
 438:	64 e0       	ldi	r22, 0x04	; 4
 43a:	81 e0       	ldi	r24, 0x01	; 1
 43c:	0e 94 4a 03 	call	0x694	; 0x694 <dio_vidWriteChannel>
	
	enablePulse();
 440:	0e 94 a2 01 	call	0x344	; 0x344 <enablePulse>
	
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D4_CHANNEL,CHECK_BIT(data,0));
 444:	4c 2f       	mov	r20, r28
 446:	41 70       	andi	r20, 0x01	; 1
 448:	60 e0       	ldi	r22, 0x00	; 0
 44a:	81 e0       	ldi	r24, 0x01	; 1
 44c:	0e 94 4a 03 	call	0x694	; 0x694 <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D5_CHANNEL,CHECK_BIT(data,1));
 450:	c1 fb       	bst	r28, 1
 452:	44 27       	eor	r20, r20
 454:	40 f9       	bld	r20, 0
 456:	61 e0       	ldi	r22, 0x01	; 1
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	0e 94 4a 03 	call	0x694	; 0x694 <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D6_CHANNEL,CHECK_BIT(data,2));
 45e:	c2 fb       	bst	r28, 2
 460:	44 27       	eor	r20, r20
 462:	40 f9       	bld	r20, 0
 464:	62 e0       	ldi	r22, 0x02	; 2
 466:	81 e0       	ldi	r24, 0x01	; 1
 468:	0e 94 4a 03 	call	0x694	; 0x694 <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D7_CHANNEL,CHECK_BIT(data,3));
 46c:	c3 fb       	bst	r28, 3
 46e:	44 27       	eor	r20, r20
 470:	40 f9       	bld	r20, 0
 472:	64 e0       	ldi	r22, 0x04	; 4
 474:	81 e0       	ldi	r24, 0x01	; 1
 476:	0e 94 4a 03 	call	0x694	; 0x694 <dio_vidWriteChannel>
	
	enablePulse();
 47a:	0e 94 a2 01 	call	0x344	; 0x344 <enablePulse>
	
}
 47e:	cf 91       	pop	r28
 480:	08 95       	ret

00000482 <lcd_vidGotoRowColumn>:
					 column -> LCD column ID															
* \Return value:   : None                                 
*******************************************************************************/
void lcd_vidGotoRowColumn(u8 row, u8 column)
{
	switch (row)
 482:	81 30       	cpi	r24, 0x01	; 1
 484:	59 f0       	breq	.+22     	; 0x49c <lcd_vidGotoRowColumn+0x1a>
 486:	28 f0       	brcs	.+10     	; 0x492 <lcd_vidGotoRowColumn+0x10>
 488:	82 30       	cpi	r24, 0x02	; 2
 48a:	69 f0       	breq	.+26     	; 0x4a6 <lcd_vidGotoRowColumn+0x24>
 48c:	83 30       	cpi	r24, 0x03	; 3
 48e:	81 f0       	breq	.+32     	; 0x4b0 <lcd_vidGotoRowColumn+0x2e>
 490:	08 95       	ret
	{
	case 0:
		/*	Row 0	*/
		lcd_vidSendCmd(0x80+column);
 492:	80 e8       	ldi	r24, 0x80	; 128
 494:	86 0f       	add	r24, r22
 496:	0e 94 b7 01 	call	0x36e	; 0x36e <lcd_vidSendCmd>
		break;
 49a:	08 95       	ret

	case 1:
		/* Row 1 */
		lcd_vidSendCmd(0xC0+column);
 49c:	80 ec       	ldi	r24, 0xC0	; 192
 49e:	86 0f       	add	r24, r22
 4a0:	0e 94 b7 01 	call	0x36e	; 0x36e <lcd_vidSendCmd>
		break;
 4a4:	08 95       	ret
		
	case 2:
		/* Row 2 */
		lcd_vidSendCmd(0x94+column);
 4a6:	84 e9       	ldi	r24, 0x94	; 148
 4a8:	86 0f       	add	r24, r22
 4aa:	0e 94 b7 01 	call	0x36e	; 0x36e <lcd_vidSendCmd>
		break;
 4ae:	08 95       	ret
	
	case 3:
		/* Row 3 */
		lcd_vidSendCmd(0xD4+column);
 4b0:	84 ed       	ldi	r24, 0xD4	; 212
 4b2:	86 0f       	add	r24, r22
 4b4:	0e 94 b7 01 	call	0x36e	; 0x36e <lcd_vidSendCmd>
 4b8:	08 95       	ret

000004ba <lcd_vidDisplyChar>:
* \Parameters (in) : chr	-> ASCI value of character															
* \Return value:   : None                                 
*******************************************************************************/
void lcd_vidDisplyChar(u8 chr)
{
	lcd_vidSendData(chr);
 4ba:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <lcd_vidSendData>
 4be:	08 95       	ret

000004c0 <lcd_vidDisplyStr>:
* \Reentrancy      : Non Reentrant                                             
* \Parameters (in) : str	-> string to be displayed														
* \Return value:   : None                                 
*******************************************************************************/
void lcd_vidDisplyStr(u8* str)
{
 4c0:	cf 93       	push	r28
 4c2:	df 93       	push	r29
 4c4:	ec 01       	movw	r28, r24
	while (*str != '\0')
 4c6:	03 c0       	rjmp	.+6      	; 0x4ce <lcd_vidDisplyStr+0xe>
	{
		lcd_vidDisplyChar(*str);
 4c8:	0e 94 5d 02 	call	0x4ba	; 0x4ba <lcd_vidDisplyChar>
		str++;
 4cc:	21 96       	adiw	r28, 0x01	; 1
* \Parameters (in) : str	-> string to be displayed														
* \Return value:   : None                                 
*******************************************************************************/
void lcd_vidDisplyStr(u8* str)
{
	while (*str != '\0')
 4ce:	88 81       	ld	r24, Y
 4d0:	81 11       	cpse	r24, r1
 4d2:	fa cf       	rjmp	.-12     	; 0x4c8 <lcd_vidDisplyStr+0x8>
	{
		lcd_vidDisplyChar(*str);
		str++;
	}
}
 4d4:	df 91       	pop	r29
 4d6:	cf 91       	pop	r28
 4d8:	08 95       	ret

000004da <lcd_vidCustomWrite>:
* \Reentrancy      : Non Reentrant
* \Parameters (in) : None
* \Return value:   : None
*******************************************************************************/
void lcd_vidCustomWrite(void)
{
 4da:	0f 93       	push	r16
 4dc:	1f 93       	push	r17
 4de:	cf 93       	push	r28
 4e0:	df 93       	push	r29
	u8 loc_ByteIndex=0;
	u8 loc_CharIndx=0;
	
	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
 4e2:	d0 e0       	ldi	r29, 0x00	; 0
 4e4:	1d c0       	rjmp	.+58     	; 0x520 <lcd_vidCustomWrite+0x46>
	{
		lcd_vidSendCmd(_LCD_CGRAM_START_ADDRESS +(loc_CharIndx*8));
 4e6:	0d 2f       	mov	r16, r29
 4e8:	10 e0       	ldi	r17, 0x00	; 0
 4ea:	c8 01       	movw	r24, r16
 4ec:	08 96       	adiw	r24, 0x08	; 8
 4ee:	88 0f       	add	r24, r24
 4f0:	88 0f       	add	r24, r24
 4f2:	88 0f       	add	r24, r24
 4f4:	0e 94 b7 01 	call	0x36e	; 0x36e <lcd_vidSendCmd>
		for (loc_ByteIndex =0; loc_ByteIndex<NO_CSTOM_CHAR_BYTES;loc_ByteIndex++)
 4f8:	c0 e0       	ldi	r28, 0x00	; 0
 4fa:	0f c0       	rjmp	.+30     	; 0x51a <lcd_vidCustomWrite+0x40>
		{
			lcd_vidDisplyChar(customChar[loc_CharIndx][loc_ByteIndex]);
 4fc:	f8 01       	movw	r30, r16
 4fe:	ee 0f       	add	r30, r30
 500:	ff 1f       	adc	r31, r31
 502:	ee 0f       	add	r30, r30
 504:	ff 1f       	adc	r31, r31
 506:	ee 0f       	add	r30, r30
 508:	ff 1f       	adc	r31, r31
 50a:	e0 59       	subi	r30, 0x90	; 144
 50c:	ff 4f       	sbci	r31, 0xFF	; 255
 50e:	ec 0f       	add	r30, r28
 510:	f1 1d       	adc	r31, r1
 512:	80 81       	ld	r24, Z
 514:	0e 94 5d 02 	call	0x4ba	; 0x4ba <lcd_vidDisplyChar>
	u8 loc_CharIndx=0;
	
	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
	{
		lcd_vidSendCmd(_LCD_CGRAM_START_ADDRESS +(loc_CharIndx*8));
		for (loc_ByteIndex =0; loc_ByteIndex<NO_CSTOM_CHAR_BYTES;loc_ByteIndex++)
 518:	cf 5f       	subi	r28, 0xFF	; 255
 51a:	c8 30       	cpi	r28, 0x08	; 8
 51c:	78 f3       	brcs	.-34     	; 0x4fc <lcd_vidCustomWrite+0x22>
void lcd_vidCustomWrite(void)
{
	u8 loc_ByteIndex=0;
	u8 loc_CharIndx=0;
	
	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
 51e:	df 5f       	subi	r29, 0xFF	; 255
 520:	d8 30       	cpi	r29, 0x08	; 8
 522:	08 f3       	brcs	.-62     	; 0x4e6 <lcd_vidCustomWrite+0xc>
		for (loc_ByteIndex =0; loc_ByteIndex<NO_CSTOM_CHAR_BYTES;loc_ByteIndex++)
		{
			lcd_vidDisplyChar(customChar[loc_CharIndx][loc_ByteIndex]);
		}
	}	
}
 524:	df 91       	pop	r29
 526:	cf 91       	pop	r28
 528:	1f 91       	pop	r17
 52a:	0f 91       	pop	r16
 52c:	08 95       	ret

0000052e <lcd_vidInit>:
* \Parameters (in) : None                                                                        
* \Return value:   : None                                 
*******************************************************************************/
void lcd_vidInit(void)
{
	dio_vidConfigChannel(LCD_RS_PORT, LCD_RS_CHANNEL, OUTPUT);
 52e:	41 e0       	ldi	r20, 0x01	; 1
 530:	63 e0       	ldi	r22, 0x03	; 3
 532:	80 e0       	ldi	r24, 0x00	; 0
 534:	0e 94 dd 02 	call	0x5ba	; 0x5ba <dio_vidConfigChannel>
	dio_vidConfigChannel(LCD_EN_PORT, LCD_EN_CHANNEL, OUTPUT);
 538:	41 e0       	ldi	r20, 0x01	; 1
 53a:	62 e0       	ldi	r22, 0x02	; 2
 53c:	80 e0       	ldi	r24, 0x00	; 0
 53e:	0e 94 dd 02 	call	0x5ba	; 0x5ba <dio_vidConfigChannel>

	dio_vidConfigChannel(LCD_D4_PORT, LCD_D4_CHANNEL, OUTPUT);
 542:	41 e0       	ldi	r20, 0x01	; 1
 544:	60 e0       	ldi	r22, 0x00	; 0
 546:	81 e0       	ldi	r24, 0x01	; 1
 548:	0e 94 dd 02 	call	0x5ba	; 0x5ba <dio_vidConfigChannel>
	dio_vidConfigChannel(LCD_D5_PORT, LCD_D5_CHANNEL, OUTPUT);
 54c:	41 e0       	ldi	r20, 0x01	; 1
 54e:	61 e0       	ldi	r22, 0x01	; 1
 550:	81 e0       	ldi	r24, 0x01	; 1
 552:	0e 94 dd 02 	call	0x5ba	; 0x5ba <dio_vidConfigChannel>
	dio_vidConfigChannel(LCD_D6_PORT, LCD_D6_CHANNEL, OUTPUT);
 556:	41 e0       	ldi	r20, 0x01	; 1
 558:	62 e0       	ldi	r22, 0x02	; 2
 55a:	81 e0       	ldi	r24, 0x01	; 1
 55c:	0e 94 dd 02 	call	0x5ba	; 0x5ba <dio_vidConfigChannel>
	dio_vidConfigChannel(LCD_D7_PORT, LCD_D7_CHANNEL, OUTPUT);
 560:	41 e0       	ldi	r20, 0x01	; 1
 562:	64 e0       	ldi	r22, 0x04	; 4
 564:	81 e0       	ldi	r24, 0x01	; 1
 566:	0e 94 dd 02 	call	0x5ba	; 0x5ba <dio_vidConfigChannel>
 56a:	8f e5       	ldi	r24, 0x5F	; 95
 56c:	9a ee       	ldi	r25, 0xEA	; 234
 56e:	01 97       	sbiw	r24, 0x01	; 1
 570:	f1 f7       	brne	.-4      	; 0x56e <lcd_vidInit+0x40>
 572:	00 c0       	rjmp	.+0      	; 0x574 <lcd_vidInit+0x46>
 574:	00 00       	nop

	_delay_ms(15);

	lcd_vidSendCmd(0x03);
 576:	83 e0       	ldi	r24, 0x03	; 3
 578:	0e 94 b7 01 	call	0x36e	; 0x36e <lcd_vidSendCmd>
 57c:	8f e1       	ldi	r24, 0x1F	; 31
 57e:	9e e4       	ldi	r25, 0x4E	; 78
 580:	01 97       	sbiw	r24, 0x01	; 1
 582:	f1 f7       	brne	.-4      	; 0x580 <lcd_vidInit+0x52>
 584:	00 c0       	rjmp	.+0      	; 0x586 <lcd_vidInit+0x58>
 586:	00 00       	nop
	_delay_ms(5);
	lcd_vidSendCmd(0x03);
 588:	83 e0       	ldi	r24, 0x03	; 3
 58a:	0e 94 b7 01 	call	0x36e	; 0x36e <lcd_vidSendCmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 58e:	8f e8       	ldi	r24, 0x8F	; 143
 590:	91 e0       	ldi	r25, 0x01	; 1
 592:	01 97       	sbiw	r24, 0x01	; 1
 594:	f1 f7       	brne	.-4      	; 0x592 <lcd_vidInit+0x64>
 596:	00 c0       	rjmp	.+0      	; 0x598 <lcd_vidInit+0x6a>
 598:	00 00       	nop
	_delay_us(100);
	lcd_vidSendCmd(0x03);
 59a:	83 e0       	ldi	r24, 0x03	; 3
 59c:	0e 94 b7 01 	call	0x36e	; 0x36e <lcd_vidSendCmd>
	lcd_vidSendCmd(0x02);
 5a0:	82 e0       	ldi	r24, 0x02	; 2
 5a2:	0e 94 b7 01 	call	0x36e	; 0x36e <lcd_vidSendCmd>
	lcd_vidSendCmd(_LCD_4BIT_MODE);
 5a6:	88 e2       	ldi	r24, 0x28	; 40
 5a8:	0e 94 b7 01 	call	0x36e	; 0x36e <lcd_vidSendCmd>
	lcd_vidCustomWrite();
 5ac:	0e 94 6d 02 	call	0x4da	; 0x4da <lcd_vidCustomWrite>
	lcd_vidGotoRowColumn(0, 0);
 5b0:	60 e0       	ldi	r22, 0x00	; 0
 5b2:	80 e0       	ldi	r24, 0x00	; 0
 5b4:	0e 94 41 02 	call	0x482	; 0x482 <lcd_vidGotoRowColumn>
 5b8:	08 95       	ret

000005ba <dio_vidConfigChannel>:
					 direction -> MC channel direction
* \Return value:   : None                            
*******************************************************************************/
void dio_vidConfigChannel(dio_portId_t port, dio_channelId_t channel, dio_direction_t direction)
{
	switch (port)
 5ba:	81 30       	cpi	r24, 0x01	; 1
 5bc:	01 f1       	breq	.+64     	; 0x5fe <dio_vidConfigChannel+0x44>
 5be:	30 f0       	brcs	.+12     	; 0x5cc <dio_vidConfigChannel+0x12>
 5c0:	82 30       	cpi	r24, 0x02	; 2
 5c2:	b1 f1       	breq	.+108    	; 0x630 <dio_vidConfigChannel+0x76>
 5c4:	83 30       	cpi	r24, 0x03	; 3
 5c6:	09 f4       	brne	.+2      	; 0x5ca <dio_vidConfigChannel+0x10>
 5c8:	4c c0       	rjmp	.+152    	; 0x662 <dio_vidConfigChannel+0xa8>
 5ca:	08 95       	ret
	{
	case DIO_PORTA:
		if (direction == OUTPUT)
 5cc:	41 30       	cpi	r20, 0x01	; 1
 5ce:	59 f4       	brne	.+22     	; 0x5e6 <dio_vidConfigChannel+0x2c>
		{
			SET_BIT (DIO_DDRA_REG,channel);
 5d0:	2a b3       	in	r18, 0x1a	; 26
 5d2:	81 e0       	ldi	r24, 0x01	; 1
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	02 c0       	rjmp	.+4      	; 0x5dc <dio_vidConfigChannel+0x22>
 5d8:	88 0f       	add	r24, r24
 5da:	99 1f       	adc	r25, r25
 5dc:	6a 95       	dec	r22
 5de:	e2 f7       	brpl	.-8      	; 0x5d8 <dio_vidConfigChannel+0x1e>
 5e0:	82 2b       	or	r24, r18
 5e2:	8a bb       	out	0x1a, r24	; 26
 5e4:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRA_REG,channel);
 5e6:	2a b3       	in	r18, 0x1a	; 26
 5e8:	81 e0       	ldi	r24, 0x01	; 1
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	02 c0       	rjmp	.+4      	; 0x5f2 <dio_vidConfigChannel+0x38>
 5ee:	88 0f       	add	r24, r24
 5f0:	99 1f       	adc	r25, r25
 5f2:	6a 95       	dec	r22
 5f4:	e2 f7       	brpl	.-8      	; 0x5ee <dio_vidConfigChannel+0x34>
 5f6:	80 95       	com	r24
 5f8:	82 23       	and	r24, r18
 5fa:	8a bb       	out	0x1a, r24	; 26
 5fc:	08 95       	ret
		}
		break;

	case DIO_PORTB:
		if (direction == OUTPUT)
 5fe:	41 30       	cpi	r20, 0x01	; 1
 600:	59 f4       	brne	.+22     	; 0x618 <dio_vidConfigChannel+0x5e>
		{
			SET_BIT (DIO_DDRB_REG,channel);
 602:	27 b3       	in	r18, 0x17	; 23
 604:	81 e0       	ldi	r24, 0x01	; 1
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	02 c0       	rjmp	.+4      	; 0x60e <dio_vidConfigChannel+0x54>
 60a:	88 0f       	add	r24, r24
 60c:	99 1f       	adc	r25, r25
 60e:	6a 95       	dec	r22
 610:	e2 f7       	brpl	.-8      	; 0x60a <dio_vidConfigChannel+0x50>
 612:	82 2b       	or	r24, r18
 614:	87 bb       	out	0x17, r24	; 23
 616:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRB_REG,channel);
 618:	27 b3       	in	r18, 0x17	; 23
 61a:	81 e0       	ldi	r24, 0x01	; 1
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	02 c0       	rjmp	.+4      	; 0x624 <dio_vidConfigChannel+0x6a>
 620:	88 0f       	add	r24, r24
 622:	99 1f       	adc	r25, r25
 624:	6a 95       	dec	r22
 626:	e2 f7       	brpl	.-8      	; 0x620 <dio_vidConfigChannel+0x66>
 628:	80 95       	com	r24
 62a:	82 23       	and	r24, r18
 62c:	87 bb       	out	0x17, r24	; 23
 62e:	08 95       	ret
		}
		break;

	case DIO_PORTC:
		if (direction == OUTPUT)
 630:	41 30       	cpi	r20, 0x01	; 1
 632:	59 f4       	brne	.+22     	; 0x64a <dio_vidConfigChannel+0x90>
		{
			SET_BIT (DIO_DDRC_REG,channel);
 634:	24 b3       	in	r18, 0x14	; 20
 636:	81 e0       	ldi	r24, 0x01	; 1
 638:	90 e0       	ldi	r25, 0x00	; 0
 63a:	02 c0       	rjmp	.+4      	; 0x640 <dio_vidConfigChannel+0x86>
 63c:	88 0f       	add	r24, r24
 63e:	99 1f       	adc	r25, r25
 640:	6a 95       	dec	r22
 642:	e2 f7       	brpl	.-8      	; 0x63c <dio_vidConfigChannel+0x82>
 644:	82 2b       	or	r24, r18
 646:	84 bb       	out	0x14, r24	; 20
 648:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRC_REG,channel);
 64a:	24 b3       	in	r18, 0x14	; 20
 64c:	81 e0       	ldi	r24, 0x01	; 1
 64e:	90 e0       	ldi	r25, 0x00	; 0
 650:	02 c0       	rjmp	.+4      	; 0x656 <dio_vidConfigChannel+0x9c>
 652:	88 0f       	add	r24, r24
 654:	99 1f       	adc	r25, r25
 656:	6a 95       	dec	r22
 658:	e2 f7       	brpl	.-8      	; 0x652 <dio_vidConfigChannel+0x98>
 65a:	80 95       	com	r24
 65c:	82 23       	and	r24, r18
 65e:	84 bb       	out	0x14, r24	; 20
 660:	08 95       	ret
		}
		break;

	case DIO_PORTD:
		if (direction == OUTPUT)
 662:	41 30       	cpi	r20, 0x01	; 1
 664:	59 f4       	brne	.+22     	; 0x67c <dio_vidConfigChannel+0xc2>
		{
			SET_BIT (DIO_DDRD_REG,channel);
 666:	21 b3       	in	r18, 0x11	; 17
 668:	81 e0       	ldi	r24, 0x01	; 1
 66a:	90 e0       	ldi	r25, 0x00	; 0
 66c:	02 c0       	rjmp	.+4      	; 0x672 <dio_vidConfigChannel+0xb8>
 66e:	88 0f       	add	r24, r24
 670:	99 1f       	adc	r25, r25
 672:	6a 95       	dec	r22
 674:	e2 f7       	brpl	.-8      	; 0x66e <dio_vidConfigChannel+0xb4>
 676:	82 2b       	or	r24, r18
 678:	81 bb       	out	0x11, r24	; 17
 67a:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRD_REG,channel);
 67c:	21 b3       	in	r18, 0x11	; 17
 67e:	81 e0       	ldi	r24, 0x01	; 1
 680:	90 e0       	ldi	r25, 0x00	; 0
 682:	02 c0       	rjmp	.+4      	; 0x688 <dio_vidConfigChannel+0xce>
 684:	88 0f       	add	r24, r24
 686:	99 1f       	adc	r25, r25
 688:	6a 95       	dec	r22
 68a:	e2 f7       	brpl	.-8      	; 0x684 <dio_vidConfigChannel+0xca>
 68c:	80 95       	com	r24
 68e:	82 23       	and	r24, r18
 690:	81 bb       	out	0x11, r24	; 17
 692:	08 95       	ret

00000694 <dio_vidWriteChannel>:
					 level    -> MC channel level
* \Return value:   : None                            
*******************************************************************************/
void dio_vidWriteChannel(dio_portId_t port, dio_channelId_t channel, dio_level_t level)
{
	switch (port)
 694:	81 30       	cpi	r24, 0x01	; 1
 696:	01 f1       	breq	.+64     	; 0x6d8 <dio_vidWriteChannel+0x44>
 698:	30 f0       	brcs	.+12     	; 0x6a6 <dio_vidWriteChannel+0x12>
 69a:	82 30       	cpi	r24, 0x02	; 2
 69c:	b1 f1       	breq	.+108    	; 0x70a <dio_vidWriteChannel+0x76>
 69e:	83 30       	cpi	r24, 0x03	; 3
 6a0:	09 f4       	brne	.+2      	; 0x6a4 <dio_vidWriteChannel+0x10>
 6a2:	4c c0       	rjmp	.+152    	; 0x73c <dio_vidWriteChannel+0xa8>
 6a4:	08 95       	ret
	{
	case DIO_PORTA:
		if (level == STD_LOW)
 6a6:	41 11       	cpse	r20, r1
 6a8:	0c c0       	rjmp	.+24     	; 0x6c2 <dio_vidWriteChannel+0x2e>
		{
			CLEAR_BIT(DIO_PORTA_REG,channel);
 6aa:	2b b3       	in	r18, 0x1b	; 27
 6ac:	81 e0       	ldi	r24, 0x01	; 1
 6ae:	90 e0       	ldi	r25, 0x00	; 0
 6b0:	02 c0       	rjmp	.+4      	; 0x6b6 <dio_vidWriteChannel+0x22>
 6b2:	88 0f       	add	r24, r24
 6b4:	99 1f       	adc	r25, r25
 6b6:	6a 95       	dec	r22
 6b8:	e2 f7       	brpl	.-8      	; 0x6b2 <dio_vidWriteChannel+0x1e>
 6ba:	80 95       	com	r24
 6bc:	82 23       	and	r24, r18
 6be:	8b bb       	out	0x1b, r24	; 27
 6c0:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTA_REG,channel);
 6c2:	2b b3       	in	r18, 0x1b	; 27
 6c4:	81 e0       	ldi	r24, 0x01	; 1
 6c6:	90 e0       	ldi	r25, 0x00	; 0
 6c8:	02 c0       	rjmp	.+4      	; 0x6ce <dio_vidWriteChannel+0x3a>
 6ca:	88 0f       	add	r24, r24
 6cc:	99 1f       	adc	r25, r25
 6ce:	6a 95       	dec	r22
 6d0:	e2 f7       	brpl	.-8      	; 0x6ca <dio_vidWriteChannel+0x36>
 6d2:	82 2b       	or	r24, r18
 6d4:	8b bb       	out	0x1b, r24	; 27
 6d6:	08 95       	ret
		}
		break;

	case DIO_PORTB:
		if (level == STD_LOW)
 6d8:	41 11       	cpse	r20, r1
 6da:	0c c0       	rjmp	.+24     	; 0x6f4 <dio_vidWriteChannel+0x60>
		{
			CLEAR_BIT(DIO_PORTB_REG,channel);
 6dc:	28 b3       	in	r18, 0x18	; 24
 6de:	81 e0       	ldi	r24, 0x01	; 1
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	02 c0       	rjmp	.+4      	; 0x6e8 <dio_vidWriteChannel+0x54>
 6e4:	88 0f       	add	r24, r24
 6e6:	99 1f       	adc	r25, r25
 6e8:	6a 95       	dec	r22
 6ea:	e2 f7       	brpl	.-8      	; 0x6e4 <dio_vidWriteChannel+0x50>
 6ec:	80 95       	com	r24
 6ee:	82 23       	and	r24, r18
 6f0:	88 bb       	out	0x18, r24	; 24
 6f2:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTB_REG,channel);
 6f4:	28 b3       	in	r18, 0x18	; 24
 6f6:	81 e0       	ldi	r24, 0x01	; 1
 6f8:	90 e0       	ldi	r25, 0x00	; 0
 6fa:	02 c0       	rjmp	.+4      	; 0x700 <dio_vidWriteChannel+0x6c>
 6fc:	88 0f       	add	r24, r24
 6fe:	99 1f       	adc	r25, r25
 700:	6a 95       	dec	r22
 702:	e2 f7       	brpl	.-8      	; 0x6fc <dio_vidWriteChannel+0x68>
 704:	82 2b       	or	r24, r18
 706:	88 bb       	out	0x18, r24	; 24
 708:	08 95       	ret
		}
		break;

	case DIO_PORTC:
		if (level == STD_LOW)
 70a:	41 11       	cpse	r20, r1
 70c:	0c c0       	rjmp	.+24     	; 0x726 <dio_vidWriteChannel+0x92>
		{
			CLEAR_BIT(DIO_PORTC_REG,channel);
 70e:	25 b3       	in	r18, 0x15	; 21
 710:	81 e0       	ldi	r24, 0x01	; 1
 712:	90 e0       	ldi	r25, 0x00	; 0
 714:	02 c0       	rjmp	.+4      	; 0x71a <dio_vidWriteChannel+0x86>
 716:	88 0f       	add	r24, r24
 718:	99 1f       	adc	r25, r25
 71a:	6a 95       	dec	r22
 71c:	e2 f7       	brpl	.-8      	; 0x716 <dio_vidWriteChannel+0x82>
 71e:	80 95       	com	r24
 720:	82 23       	and	r24, r18
 722:	85 bb       	out	0x15, r24	; 21
 724:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTC_REG,channel);
 726:	25 b3       	in	r18, 0x15	; 21
 728:	81 e0       	ldi	r24, 0x01	; 1
 72a:	90 e0       	ldi	r25, 0x00	; 0
 72c:	02 c0       	rjmp	.+4      	; 0x732 <dio_vidWriteChannel+0x9e>
 72e:	88 0f       	add	r24, r24
 730:	99 1f       	adc	r25, r25
 732:	6a 95       	dec	r22
 734:	e2 f7       	brpl	.-8      	; 0x72e <dio_vidWriteChannel+0x9a>
 736:	82 2b       	or	r24, r18
 738:	85 bb       	out	0x15, r24	; 21
 73a:	08 95       	ret
		}
		break;

	case DIO_PORTD:
		if (level == STD_LOW)
 73c:	41 11       	cpse	r20, r1
 73e:	0c c0       	rjmp	.+24     	; 0x758 <dio_vidWriteChannel+0xc4>
		{
			CLEAR_BIT(DIO_PORTD_REG,channel);
 740:	22 b3       	in	r18, 0x12	; 18
 742:	81 e0       	ldi	r24, 0x01	; 1
 744:	90 e0       	ldi	r25, 0x00	; 0
 746:	02 c0       	rjmp	.+4      	; 0x74c <dio_vidWriteChannel+0xb8>
 748:	88 0f       	add	r24, r24
 74a:	99 1f       	adc	r25, r25
 74c:	6a 95       	dec	r22
 74e:	e2 f7       	brpl	.-8      	; 0x748 <dio_vidWriteChannel+0xb4>
 750:	80 95       	com	r24
 752:	82 23       	and	r24, r18
 754:	82 bb       	out	0x12, r24	; 18
 756:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTD_REG,channel);
 758:	22 b3       	in	r18, 0x12	; 18
 75a:	81 e0       	ldi	r24, 0x01	; 1
 75c:	90 e0       	ldi	r25, 0x00	; 0
 75e:	02 c0       	rjmp	.+4      	; 0x764 <dio_vidWriteChannel+0xd0>
 760:	88 0f       	add	r24, r24
 762:	99 1f       	adc	r25, r25
 764:	6a 95       	dec	r22
 766:	e2 f7       	brpl	.-8      	; 0x760 <dio_vidWriteChannel+0xcc>
 768:	82 2b       	or	r24, r18
 76a:	82 bb       	out	0x12, r24	; 18
 76c:	08 95       	ret

0000076e <UART_Init>:



void UART_setTxCallback(void (*ptr)(void))
{
	txcPtr = ptr;
 76e:	90 bd       	out	0x20, r25	; 32
 770:	89 b9       	out	0x09, r24	; 9
 772:	8a b1       	in	r24, 0x0a	; 10
 774:	80 61       	ori	r24, 0x10	; 16
 776:	8a b9       	out	0x0a, r24	; 10
 778:	8a b1       	in	r24, 0x0a	; 10
 77a:	88 60       	ori	r24, 0x08	; 8
 77c:	8a b9       	out	0x0a, r24	; 10
 77e:	80 b5       	in	r24, 0x20	; 32
 780:	86 6a       	ori	r24, 0xA6	; 166
 782:	80 bd       	out	0x20, r24	; 32
 784:	8a b1       	in	r24, 0x0a	; 10
 786:	80 68       	ori	r24, 0x80	; 128
 788:	8a b9       	out	0x0a, r24	; 10
 78a:	8a b1       	in	r24, 0x0a	; 10
 78c:	80 64       	ori	r24, 0x40	; 64
 78e:	8a b9       	out	0x0a, r24	; 10
 790:	08 95       	ret

00000792 <UART_ReceiveChrINT>:
 792:	8c b1       	in	r24, 0x0c	; 12
 794:	08 95       	ret

00000796 <UART_setRxCallback>:
}

void UART_setRxCallback(void (*ptr)(void))
{
	rxcPtr = ptr;
 796:	90 93 f5 00 	sts	0x00F5, r25	; 0x8000f5 <rxcPtr+0x1>
 79a:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <rxcPtr>
 79e:	08 95       	ret

000007a0 <__vector_15>:
}

ISR(USART_TXC_vect)
{
 7a0:	1f 92       	push	r1
 7a2:	0f 92       	push	r0
 7a4:	0f b6       	in	r0, 0x3f	; 63
 7a6:	0f 92       	push	r0
 7a8:	11 24       	eor	r1, r1
 7aa:	2f 93       	push	r18
 7ac:	3f 93       	push	r19
 7ae:	4f 93       	push	r20
 7b0:	5f 93       	push	r21
 7b2:	6f 93       	push	r22
 7b4:	7f 93       	push	r23
 7b6:	8f 93       	push	r24
 7b8:	9f 93       	push	r25
 7ba:	af 93       	push	r26
 7bc:	bf 93       	push	r27
 7be:	ef 93       	push	r30
 7c0:	ff 93       	push	r31
	if (txcPtr != NULL)
 7c2:	e0 91 f6 00 	lds	r30, 0x00F6	; 0x8000f6 <txcPtr>
 7c6:	f0 91 f7 00 	lds	r31, 0x00F7	; 0x8000f7 <txcPtr+0x1>
 7ca:	30 97       	sbiw	r30, 0x00	; 0
 7cc:	09 f0       	breq	.+2      	; 0x7d0 <__vector_15+0x30>
	{
		txcPtr();	
 7ce:	09 95       	icall
	}
}
 7d0:	ff 91       	pop	r31
 7d2:	ef 91       	pop	r30
 7d4:	bf 91       	pop	r27
 7d6:	af 91       	pop	r26
 7d8:	9f 91       	pop	r25
 7da:	8f 91       	pop	r24
 7dc:	7f 91       	pop	r23
 7de:	6f 91       	pop	r22
 7e0:	5f 91       	pop	r21
 7e2:	4f 91       	pop	r20
 7e4:	3f 91       	pop	r19
 7e6:	2f 91       	pop	r18
 7e8:	0f 90       	pop	r0
 7ea:	0f be       	out	0x3f, r0	; 63
 7ec:	0f 90       	pop	r0
 7ee:	1f 90       	pop	r1
 7f0:	18 95       	reti

000007f2 <__vector_13>:


ISR(USART_RXC_vect)
{
 7f2:	1f 92       	push	r1
 7f4:	0f 92       	push	r0
 7f6:	0f b6       	in	r0, 0x3f	; 63
 7f8:	0f 92       	push	r0
 7fa:	11 24       	eor	r1, r1
 7fc:	2f 93       	push	r18
 7fe:	3f 93       	push	r19
 800:	4f 93       	push	r20
 802:	5f 93       	push	r21
 804:	6f 93       	push	r22
 806:	7f 93       	push	r23
 808:	8f 93       	push	r24
 80a:	9f 93       	push	r25
 80c:	af 93       	push	r26
 80e:	bf 93       	push	r27
 810:	ef 93       	push	r30
 812:	ff 93       	push	r31
	if (rxcPtr != NULL)
 814:	e0 91 f4 00 	lds	r30, 0x00F4	; 0x8000f4 <rxcPtr>
 818:	f0 91 f5 00 	lds	r31, 0x00F5	; 0x8000f5 <rxcPtr+0x1>
 81c:	30 97       	sbiw	r30, 0x00	; 0
 81e:	09 f0       	breq	.+2      	; 0x822 <__DATA_REGION_LENGTH__+0x22>
	{
		rxcPtr();
 820:	09 95       	icall
	}
 822:	ff 91       	pop	r31
 824:	ef 91       	pop	r30
 826:	bf 91       	pop	r27
 828:	af 91       	pop	r26
 82a:	9f 91       	pop	r25
 82c:	8f 91       	pop	r24
 82e:	7f 91       	pop	r23
 830:	6f 91       	pop	r22
 832:	5f 91       	pop	r21
 834:	4f 91       	pop	r20
 836:	3f 91       	pop	r19
 838:	2f 91       	pop	r18
 83a:	0f 90       	pop	r0
 83c:	0f be       	out	0x3f, r0	; 63
 83e:	0f 90       	pop	r0
 840:	1f 90       	pop	r1
 842:	18 95       	reti

00000844 <do_rand>:
 844:	8f 92       	push	r8
 846:	9f 92       	push	r9
 848:	af 92       	push	r10
 84a:	bf 92       	push	r11
 84c:	cf 92       	push	r12
 84e:	df 92       	push	r13
 850:	ef 92       	push	r14
 852:	ff 92       	push	r15
 854:	cf 93       	push	r28
 856:	df 93       	push	r29
 858:	ec 01       	movw	r28, r24
 85a:	68 81       	ld	r22, Y
 85c:	79 81       	ldd	r23, Y+1	; 0x01
 85e:	8a 81       	ldd	r24, Y+2	; 0x02
 860:	9b 81       	ldd	r25, Y+3	; 0x03
 862:	61 15       	cp	r22, r1
 864:	71 05       	cpc	r23, r1
 866:	81 05       	cpc	r24, r1
 868:	91 05       	cpc	r25, r1
 86a:	21 f4       	brne	.+8      	; 0x874 <__stack+0x15>
 86c:	64 e2       	ldi	r22, 0x24	; 36
 86e:	79 ed       	ldi	r23, 0xD9	; 217
 870:	8b e5       	ldi	r24, 0x5B	; 91
 872:	97 e0       	ldi	r25, 0x07	; 7
 874:	2d e1       	ldi	r18, 0x1D	; 29
 876:	33 ef       	ldi	r19, 0xF3	; 243
 878:	41 e0       	ldi	r20, 0x01	; 1
 87a:	50 e0       	ldi	r21, 0x00	; 0
 87c:	0e 94 96 04 	call	0x92c	; 0x92c <__divmodsi4>
 880:	49 01       	movw	r8, r18
 882:	5a 01       	movw	r10, r20
 884:	9b 01       	movw	r18, r22
 886:	ac 01       	movw	r20, r24
 888:	a7 ea       	ldi	r26, 0xA7	; 167
 88a:	b1 e4       	ldi	r27, 0x41	; 65
 88c:	0e 94 b5 04 	call	0x96a	; 0x96a <__muluhisi3>
 890:	6b 01       	movw	r12, r22
 892:	7c 01       	movw	r14, r24
 894:	ac ee       	ldi	r26, 0xEC	; 236
 896:	b4 ef       	ldi	r27, 0xF4	; 244
 898:	a5 01       	movw	r20, r10
 89a:	94 01       	movw	r18, r8
 89c:	0e 94 c3 04 	call	0x986	; 0x986 <__mulohisi3>
 8a0:	dc 01       	movw	r26, r24
 8a2:	cb 01       	movw	r24, r22
 8a4:	8c 0d       	add	r24, r12
 8a6:	9d 1d       	adc	r25, r13
 8a8:	ae 1d       	adc	r26, r14
 8aa:	bf 1d       	adc	r27, r15
 8ac:	b7 ff       	sbrs	r27, 7
 8ae:	03 c0       	rjmp	.+6      	; 0x8b6 <__stack+0x57>
 8b0:	01 97       	sbiw	r24, 0x01	; 1
 8b2:	a1 09       	sbc	r26, r1
 8b4:	b0 48       	sbci	r27, 0x80	; 128
 8b6:	88 83       	st	Y, r24
 8b8:	99 83       	std	Y+1, r25	; 0x01
 8ba:	aa 83       	std	Y+2, r26	; 0x02
 8bc:	bb 83       	std	Y+3, r27	; 0x03
 8be:	9f 77       	andi	r25, 0x7F	; 127
 8c0:	df 91       	pop	r29
 8c2:	cf 91       	pop	r28
 8c4:	ff 90       	pop	r15
 8c6:	ef 90       	pop	r14
 8c8:	df 90       	pop	r13
 8ca:	cf 90       	pop	r12
 8cc:	bf 90       	pop	r11
 8ce:	af 90       	pop	r10
 8d0:	9f 90       	pop	r9
 8d2:	8f 90       	pop	r8
 8d4:	08 95       	ret

000008d6 <rand_r>:
 8d6:	0e 94 22 04 	call	0x844	; 0x844 <do_rand>
 8da:	08 95       	ret

000008dc <rand>:
 8dc:	80 e6       	ldi	r24, 0x60	; 96
 8de:	90 e0       	ldi	r25, 0x00	; 0
 8e0:	0e 94 22 04 	call	0x844	; 0x844 <do_rand>
 8e4:	08 95       	ret

000008e6 <srand>:
 8e6:	a0 e0       	ldi	r26, 0x00	; 0
 8e8:	b0 e0       	ldi	r27, 0x00	; 0
 8ea:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 8ee:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 8f2:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 8f6:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 8fa:	08 95       	ret

000008fc <memcmp>:
 8fc:	fb 01       	movw	r30, r22
 8fe:	dc 01       	movw	r26, r24
 900:	04 c0       	rjmp	.+8      	; 0x90a <memcmp+0xe>
 902:	8d 91       	ld	r24, X+
 904:	01 90       	ld	r0, Z+
 906:	80 19       	sub	r24, r0
 908:	21 f4       	brne	.+8      	; 0x912 <memcmp+0x16>
 90a:	41 50       	subi	r20, 0x01	; 1
 90c:	50 40       	sbci	r21, 0x00	; 0
 90e:	c8 f7       	brcc	.-14     	; 0x902 <memcmp+0x6>
 910:	88 1b       	sub	r24, r24
 912:	99 0b       	sbc	r25, r25
 914:	08 95       	ret

00000916 <strcat>:
 916:	fb 01       	movw	r30, r22
 918:	dc 01       	movw	r26, r24
 91a:	0d 90       	ld	r0, X+
 91c:	00 20       	and	r0, r0
 91e:	e9 f7       	brne	.-6      	; 0x91a <strcat+0x4>
 920:	11 97       	sbiw	r26, 0x01	; 1
 922:	01 90       	ld	r0, Z+
 924:	0d 92       	st	X+, r0
 926:	00 20       	and	r0, r0
 928:	e1 f7       	brne	.-8      	; 0x922 <strcat+0xc>
 92a:	08 95       	ret

0000092c <__divmodsi4>:
 92c:	05 2e       	mov	r0, r21
 92e:	97 fb       	bst	r25, 7
 930:	1e f4       	brtc	.+6      	; 0x938 <__divmodsi4+0xc>
 932:	00 94       	com	r0
 934:	0e 94 ad 04 	call	0x95a	; 0x95a <__negsi2>
 938:	57 fd       	sbrc	r21, 7
 93a:	07 d0       	rcall	.+14     	; 0x94a <__divmodsi4_neg2>
 93c:	0e 94 c8 04 	call	0x990	; 0x990 <__udivmodsi4>
 940:	07 fc       	sbrc	r0, 7
 942:	03 d0       	rcall	.+6      	; 0x94a <__divmodsi4_neg2>
 944:	4e f4       	brtc	.+18     	; 0x958 <__divmodsi4_exit>
 946:	0c 94 ad 04 	jmp	0x95a	; 0x95a <__negsi2>

0000094a <__divmodsi4_neg2>:
 94a:	50 95       	com	r21
 94c:	40 95       	com	r20
 94e:	30 95       	com	r19
 950:	21 95       	neg	r18
 952:	3f 4f       	sbci	r19, 0xFF	; 255
 954:	4f 4f       	sbci	r20, 0xFF	; 255
 956:	5f 4f       	sbci	r21, 0xFF	; 255

00000958 <__divmodsi4_exit>:
 958:	08 95       	ret

0000095a <__negsi2>:
 95a:	90 95       	com	r25
 95c:	80 95       	com	r24
 95e:	70 95       	com	r23
 960:	61 95       	neg	r22
 962:	7f 4f       	sbci	r23, 0xFF	; 255
 964:	8f 4f       	sbci	r24, 0xFF	; 255
 966:	9f 4f       	sbci	r25, 0xFF	; 255
 968:	08 95       	ret

0000096a <__muluhisi3>:
 96a:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <__umulhisi3>
 96e:	a5 9f       	mul	r26, r21
 970:	90 0d       	add	r25, r0
 972:	b4 9f       	mul	r27, r20
 974:	90 0d       	add	r25, r0
 976:	a4 9f       	mul	r26, r20
 978:	80 0d       	add	r24, r0
 97a:	91 1d       	adc	r25, r1
 97c:	11 24       	eor	r1, r1
 97e:	08 95       	ret

00000980 <__mulshisi3>:
 980:	b7 ff       	sbrs	r27, 7
 982:	0c 94 b5 04 	jmp	0x96a	; 0x96a <__muluhisi3>

00000986 <__mulohisi3>:
 986:	0e 94 b5 04 	call	0x96a	; 0x96a <__muluhisi3>
 98a:	82 1b       	sub	r24, r18
 98c:	93 0b       	sbc	r25, r19
 98e:	08 95       	ret

00000990 <__udivmodsi4>:
 990:	a1 e2       	ldi	r26, 0x21	; 33
 992:	1a 2e       	mov	r1, r26
 994:	aa 1b       	sub	r26, r26
 996:	bb 1b       	sub	r27, r27
 998:	fd 01       	movw	r30, r26
 99a:	0d c0       	rjmp	.+26     	; 0x9b6 <__udivmodsi4_ep>

0000099c <__udivmodsi4_loop>:
 99c:	aa 1f       	adc	r26, r26
 99e:	bb 1f       	adc	r27, r27
 9a0:	ee 1f       	adc	r30, r30
 9a2:	ff 1f       	adc	r31, r31
 9a4:	a2 17       	cp	r26, r18
 9a6:	b3 07       	cpc	r27, r19
 9a8:	e4 07       	cpc	r30, r20
 9aa:	f5 07       	cpc	r31, r21
 9ac:	20 f0       	brcs	.+8      	; 0x9b6 <__udivmodsi4_ep>
 9ae:	a2 1b       	sub	r26, r18
 9b0:	b3 0b       	sbc	r27, r19
 9b2:	e4 0b       	sbc	r30, r20
 9b4:	f5 0b       	sbc	r31, r21

000009b6 <__udivmodsi4_ep>:
 9b6:	66 1f       	adc	r22, r22
 9b8:	77 1f       	adc	r23, r23
 9ba:	88 1f       	adc	r24, r24
 9bc:	99 1f       	adc	r25, r25
 9be:	1a 94       	dec	r1
 9c0:	69 f7       	brne	.-38     	; 0x99c <__udivmodsi4_loop>
 9c2:	60 95       	com	r22
 9c4:	70 95       	com	r23
 9c6:	80 95       	com	r24
 9c8:	90 95       	com	r25
 9ca:	9b 01       	movw	r18, r22
 9cc:	ac 01       	movw	r20, r24
 9ce:	bd 01       	movw	r22, r26
 9d0:	cf 01       	movw	r24, r30
 9d2:	08 95       	ret

000009d4 <__umulhisi3>:
 9d4:	a2 9f       	mul	r26, r18
 9d6:	b0 01       	movw	r22, r0
 9d8:	b3 9f       	mul	r27, r19
 9da:	c0 01       	movw	r24, r0
 9dc:	a3 9f       	mul	r26, r19
 9de:	70 0d       	add	r23, r0
 9e0:	81 1d       	adc	r24, r1
 9e2:	11 24       	eor	r1, r1
 9e4:	91 1d       	adc	r25, r1
 9e6:	b2 9f       	mul	r27, r18
 9e8:	70 0d       	add	r23, r0
 9ea:	81 1d       	adc	r24, r1
 9ec:	11 24       	eor	r1, r1
 9ee:	91 1d       	adc	r25, r1
 9f0:	08 95       	ret

000009f2 <_exit>:
 9f2:	f8 94       	cli

000009f4 <__stop_program>:
 9f4:	ff cf       	rjmp	.-2      	; 0x9f4 <__stop_program>
